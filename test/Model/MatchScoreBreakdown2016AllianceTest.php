<?php
/**
 * MatchScoreBreakdown2016AllianceTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  TBA-API\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace TBA-API\v3client;

use PHPUnit\Framework\TestCase;

/**
 * MatchScoreBreakdown2016AllianceTest Class Doc Comment
 *
 * @category    Class
 * @description MatchScoreBreakdown2016Alliance
 * @package     TBA-API\v3client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class MatchScoreBreakdown2016AllianceTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "MatchScoreBreakdown2016Alliance"
     */
    public function testMatchScoreBreakdown2016Alliance()
    {
    }

    /**
     * Test attribute "auto_points"
     */
    public function testPropertyAutoPoints()
    {
    }

    /**
     * Test attribute "teleop_points"
     */
    public function testPropertyTeleopPoints()
    {
    }

    /**
     * Test attribute "breach_points"
     */
    public function testPropertyBreachPoints()
    {
    }

    /**
     * Test attribute "foul_points"
     */
    public function testPropertyFoulPoints()
    {
    }

    /**
     * Test attribute "capture_points"
     */
    public function testPropertyCapturePoints()
    {
    }

    /**
     * Test attribute "adjust_points"
     */
    public function testPropertyAdjustPoints()
    {
    }

    /**
     * Test attribute "total_points"
     */
    public function testPropertyTotalPoints()
    {
    }

    /**
     * Test attribute "robot1_auto"
     */
    public function testPropertyRobot1Auto()
    {
    }

    /**
     * Test attribute "robot2_auto"
     */
    public function testPropertyRobot2Auto()
    {
    }

    /**
     * Test attribute "robot3_auto"
     */
    public function testPropertyRobot3Auto()
    {
    }

    /**
     * Test attribute "auto_reach_points"
     */
    public function testPropertyAutoReachPoints()
    {
    }

    /**
     * Test attribute "auto_crossing_points"
     */
    public function testPropertyAutoCrossingPoints()
    {
    }

    /**
     * Test attribute "auto_boulders_low"
     */
    public function testPropertyAutoBouldersLow()
    {
    }

    /**
     * Test attribute "auto_boulders_high"
     */
    public function testPropertyAutoBouldersHigh()
    {
    }

    /**
     * Test attribute "auto_boulder_points"
     */
    public function testPropertyAutoBoulderPoints()
    {
    }

    /**
     * Test attribute "teleop_crossing_points"
     */
    public function testPropertyTeleopCrossingPoints()
    {
    }

    /**
     * Test attribute "teleop_boulders_low"
     */
    public function testPropertyTeleopBouldersLow()
    {
    }

    /**
     * Test attribute "teleop_boulders_high"
     */
    public function testPropertyTeleopBouldersHigh()
    {
    }

    /**
     * Test attribute "teleop_boulder_points"
     */
    public function testPropertyTeleopBoulderPoints()
    {
    }

    /**
     * Test attribute "teleop_defenses_breached"
     */
    public function testPropertyTeleopDefensesBreached()
    {
    }

    /**
     * Test attribute "teleop_challenge_points"
     */
    public function testPropertyTeleopChallengePoints()
    {
    }

    /**
     * Test attribute "teleop_scale_points"
     */
    public function testPropertyTeleopScalePoints()
    {
    }

    /**
     * Test attribute "teleop_tower_captured"
     */
    public function testPropertyTeleopTowerCaptured()
    {
    }

    /**
     * Test attribute "tower_face_a"
     */
    public function testPropertyTowerFaceA()
    {
    }

    /**
     * Test attribute "tower_face_b"
     */
    public function testPropertyTowerFaceB()
    {
    }

    /**
     * Test attribute "tower_face_c"
     */
    public function testPropertyTowerFaceC()
    {
    }

    /**
     * Test attribute "tower_end_strength"
     */
    public function testPropertyTowerEndStrength()
    {
    }

    /**
     * Test attribute "tech_foul_count"
     */
    public function testPropertyTechFoulCount()
    {
    }

    /**
     * Test attribute "foul_count"
     */
    public function testPropertyFoulCount()
    {
    }

    /**
     * Test attribute "position2"
     */
    public function testPropertyPosition2()
    {
    }

    /**
     * Test attribute "position3"
     */
    public function testPropertyPosition3()
    {
    }

    /**
     * Test attribute "position4"
     */
    public function testPropertyPosition4()
    {
    }

    /**
     * Test attribute "position5"
     */
    public function testPropertyPosition5()
    {
    }

    /**
     * Test attribute "position1crossings"
     */
    public function testPropertyPosition1crossings()
    {
    }

    /**
     * Test attribute "position2crossings"
     */
    public function testPropertyPosition2crossings()
    {
    }

    /**
     * Test attribute "position3crossings"
     */
    public function testPropertyPosition3crossings()
    {
    }

    /**
     * Test attribute "position4crossings"
     */
    public function testPropertyPosition4crossings()
    {
    }

    /**
     * Test attribute "position5crossings"
     */
    public function testPropertyPosition5crossings()
    {
    }
}
