<?php
/**
 * Media
 *
 * PHP version 5
 *
 * @category Class
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TBAAPI\v3client\TBAAPI\v3client\model;

use \ArrayAccess;
use \TBAAPI\v3client\ObjectSerializer;

/**
 * Media Class Doc Comment
 *
 * @category Class
 * @description The &#x60;Media&#x60; object contains a reference for most any media associated with a team or event on TBA.
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Media implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Media';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'foreign_key' => 'string',
        'details' => 'object',
        'preferred' => 'bool',
        'direct_url' => 'string',
        'view_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => null,
        'foreign_key' => null,
        'details' => null,
        'preferred' => null,
        'direct_url' => null,
        'view_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'foreign_key' => 'foreign_key',
        'details' => 'details',
        'preferred' => 'preferred',
        'direct_url' => 'direct_url',
        'view_url' => 'view_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'foreign_key' => 'setForeignKey',
        'details' => 'setDetails',
        'preferred' => 'setPreferred',
        'direct_url' => 'setDirectUrl',
        'view_url' => 'setViewUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'foreign_key' => 'getForeignKey',
        'details' => 'getDetails',
        'preferred' => 'getPreferred',
        'direct_url' => 'getDirectUrl',
        'view_url' => 'getViewUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_YOUTUBE = 'youtube';
    const TYPE_CDPHOTOTHREAD = 'cdphotothread';
    const TYPE_IMGUR = 'imgur';
    const TYPE_FACEBOOK_PROFILE = 'facebook-profile';
    const TYPE_YOUTUBE_CHANNEL = 'youtube-channel';
    const TYPE_TWITTER_PROFILE = 'twitter-profile';
    const TYPE_GITHUB_PROFILE = 'github-profile';
    const TYPE_INSTAGRAM_PROFILE = 'instagram-profile';
    const TYPE_PERISCOPE_PROFILE = 'periscope-profile';
    const TYPE_GRABCAD = 'grabcad';
    const TYPE_INSTAGRAM_IMAGE = 'instagram-image';
    const TYPE_EXTERNAL_LINK = 'external-link';
    const TYPE_AVATAR = 'avatar';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_YOUTUBE,
            self::TYPE_CDPHOTOTHREAD,
            self::TYPE_IMGUR,
            self::TYPE_FACEBOOK_PROFILE,
            self::TYPE_YOUTUBE_CHANNEL,
            self::TYPE_TWITTER_PROFILE,
            self::TYPE_GITHUB_PROFILE,
            self::TYPE_INSTAGRAM_PROFILE,
            self::TYPE_PERISCOPE_PROFILE,
            self::TYPE_GRABCAD,
            self::TYPE_INSTAGRAM_IMAGE,
            self::TYPE_EXTERNAL_LINK,
            self::TYPE_AVATAR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['foreign_key'] = isset($data['foreign_key']) ? $data['foreign_key'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['preferred'] = isset($data['preferred']) ? $data['preferred'] : null;
        $this->container['direct_url'] = isset($data['direct_url']) ? $data['direct_url'] : null;
        $this->container['view_url'] = isset($data['view_url']) ? $data['view_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['foreign_key'] === null) {
            $invalidProperties[] = "'foreign_key' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type String type of the media element.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets foreign_key
     *
     * @return string
     */
    public function getForeignKey()
    {
        return $this->container['foreign_key'];
    }

    /**
     * Sets foreign_key
     *
     * @param string $foreign_key The key used to identify this media on the media site.
     *
     * @return $this
     */
    public function setForeignKey($foreign_key)
    {
        $this->container['foreign_key'] = $foreign_key;

        return $this;
    }

    /**
     * Gets details
     *
     * @return object|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param object|null $details If required, a JSON dict of additional media information.
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets preferred
     *
     * @return bool|null
     */
    public function getPreferred()
    {
        return $this->container['preferred'];
    }

    /**
     * Sets preferred
     *
     * @param bool|null $preferred True if the media is of high quality.
     *
     * @return $this
     */
    public function setPreferred($preferred)
    {
        $this->container['preferred'] = $preferred;

        return $this;
    }

    /**
     * Gets direct_url
     *
     * @return string|null
     */
    public function getDirectUrl()
    {
        return $this->container['direct_url'];
    }

    /**
     * Sets direct_url
     *
     * @param string|null $direct_url Direct URL to the media.
     *
     * @return $this
     */
    public function setDirectUrl($direct_url)
    {
        $this->container['direct_url'] = $direct_url;

        return $this;
    }

    /**
     * Gets view_url
     *
     * @return string|null
     */
    public function getViewUrl()
    {
        return $this->container['view_url'];
    }

    /**
     * Sets view_url
     *
     * @param string|null $view_url The URL that leads to the full web page for the media, if one exists.
     *
     * @return $this
     */
    public function setViewUrl($view_url)
    {
        $this->container['view_url'] = $view_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


