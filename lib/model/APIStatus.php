<?php
/**
 * APIStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TBAAPI\v3client\TBAAPI\v3client\model;

use \ArrayAccess;
use \TBAAPI\v3client\ObjectSerializer;

/**
 * APIStatus Class Doc Comment
 *
 * @category Class
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class APIStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_Status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'current_season' => 'int',
        'max_season' => 'int',
        'is_datafeed_down' => 'bool',
        'down_events' => 'string[]',
        'ios' => '\TBAAPI\v3client\TBAAPI\v3client\model\APIStatusAppVersion',
        'android' => '\TBAAPI\v3client\TBAAPI\v3client\model\APIStatusAppVersion'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'current_season' => null,
        'max_season' => null,
        'is_datafeed_down' => null,
        'down_events' => null,
        'ios' => null,
        'android' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'current_season' => 'current_season',
        'max_season' => 'max_season',
        'is_datafeed_down' => 'is_datafeed_down',
        'down_events' => 'down_events',
        'ios' => 'ios',
        'android' => 'android'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'current_season' => 'setCurrentSeason',
        'max_season' => 'setMaxSeason',
        'is_datafeed_down' => 'setIsDatafeedDown',
        'down_events' => 'setDownEvents',
        'ios' => 'setIos',
        'android' => 'setAndroid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'current_season' => 'getCurrentSeason',
        'max_season' => 'getMaxSeason',
        'is_datafeed_down' => 'getIsDatafeedDown',
        'down_events' => 'getDownEvents',
        'ios' => 'getIos',
        'android' => 'getAndroid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['current_season'] = isset($data['current_season']) ? $data['current_season'] : null;
        $this->container['max_season'] = isset($data['max_season']) ? $data['max_season'] : null;
        $this->container['is_datafeed_down'] = isset($data['is_datafeed_down']) ? $data['is_datafeed_down'] : null;
        $this->container['down_events'] = isset($data['down_events']) ? $data['down_events'] : null;
        $this->container['ios'] = isset($data['ios']) ? $data['ios'] : null;
        $this->container['android'] = isset($data['android']) ? $data['android'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['current_season'] === null) {
            $invalidProperties[] = "'current_season' can't be null";
        }
        if ($this->container['max_season'] === null) {
            $invalidProperties[] = "'max_season' can't be null";
        }
        if ($this->container['is_datafeed_down'] === null) {
            $invalidProperties[] = "'is_datafeed_down' can't be null";
        }
        if ($this->container['down_events'] === null) {
            $invalidProperties[] = "'down_events' can't be null";
        }
        if ($this->container['ios'] === null) {
            $invalidProperties[] = "'ios' can't be null";
        }
        if ($this->container['android'] === null) {
            $invalidProperties[] = "'android' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets current_season
     *
     * @return int
     */
    public function getCurrentSeason()
    {
        return $this->container['current_season'];
    }

    /**
     * Sets current_season
     *
     * @param int $current_season Year of the current FRC season.
     *
     * @return $this
     */
    public function setCurrentSeason($current_season)
    {
        $this->container['current_season'] = $current_season;

        return $this;
    }

    /**
     * Gets max_season
     *
     * @return int
     */
    public function getMaxSeason()
    {
        return $this->container['max_season'];
    }

    /**
     * Sets max_season
     *
     * @param int $max_season Maximum FRC season year for valid queries.
     *
     * @return $this
     */
    public function setMaxSeason($max_season)
    {
        $this->container['max_season'] = $max_season;

        return $this;
    }

    /**
     * Gets is_datafeed_down
     *
     * @return bool
     */
    public function getIsDatafeedDown()
    {
        return $this->container['is_datafeed_down'];
    }

    /**
     * Sets is_datafeed_down
     *
     * @param bool $is_datafeed_down True if the entire FMS API provided by FIRST is down.
     *
     * @return $this
     */
    public function setIsDatafeedDown($is_datafeed_down)
    {
        $this->container['is_datafeed_down'] = $is_datafeed_down;

        return $this;
    }

    /**
     * Gets down_events
     *
     * @return string[]
     */
    public function getDownEvents()
    {
        return $this->container['down_events'];
    }

    /**
     * Sets down_events
     *
     * @param string[] $down_events An array of strings containing event keys of any active events that are no longer updating.
     *
     * @return $this
     */
    public function setDownEvents($down_events)
    {
        $this->container['down_events'] = $down_events;

        return $this;
    }

    /**
     * Gets ios
     *
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\APIStatusAppVersion
     */
    public function getIos()
    {
        return $this->container['ios'];
    }

    /**
     * Sets ios
     *
     * @param \TBAAPI\v3client\TBAAPI\v3client\model\APIStatusAppVersion $ios ios
     *
     * @return $this
     */
    public function setIos($ios)
    {
        $this->container['ios'] = $ios;

        return $this;
    }

    /**
     * Gets android
     *
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\APIStatusAppVersion
     */
    public function getAndroid()
    {
        return $this->container['android'];
    }

    /**
     * Sets android
     *
     * @param \TBAAPI\v3client\TBAAPI\v3client\model\APIStatusAppVersion $android android
     *
     * @return $this
     */
    public function setAndroid($android)
    {
        $this->container['android'] = $android;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


