<?php
/**
 * Team
 *
 * PHP version 5
 *
 * @category Class
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TBAAPI\v3client\TBAAPI\v3client\model;

use \ArrayAccess;
use \TBAAPI\v3client\ObjectSerializer;

/**
 * Team Class Doc Comment
 *
 * @category Class
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Team implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Team';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'team_number' => 'int',
        'nickname' => 'string',
        'name' => 'string',
        'school_name' => 'string',
        'city' => 'string',
        'state_prov' => 'string',
        'country' => 'string',
        'address' => 'string',
        'postal_code' => 'string',
        'gmaps_place_id' => 'string',
        'gmaps_url' => 'string',
        'lat' => 'double',
        'lng' => 'double',
        'location_name' => 'string',
        'website' => 'string',
        'rookie_year' => 'int',
        'motto' => 'string',
        'home_championship' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'key' => null,
        'team_number' => null,
        'nickname' => null,
        'name' => null,
        'school_name' => null,
        'city' => null,
        'state_prov' => null,
        'country' => null,
        'address' => null,
        'postal_code' => null,
        'gmaps_place_id' => null,
        'gmaps_url' => 'url',
        'lat' => 'double',
        'lng' => 'double',
        'location_name' => null,
        'website' => 'url',
        'rookie_year' => null,
        'motto' => null,
        'home_championship' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'team_number' => 'team_number',
        'nickname' => 'nickname',
        'name' => 'name',
        'school_name' => 'school_name',
        'city' => 'city',
        'state_prov' => 'state_prov',
        'country' => 'country',
        'address' => 'address',
        'postal_code' => 'postal_code',
        'gmaps_place_id' => 'gmaps_place_id',
        'gmaps_url' => 'gmaps_url',
        'lat' => 'lat',
        'lng' => 'lng',
        'location_name' => 'location_name',
        'website' => 'website',
        'rookie_year' => 'rookie_year',
        'motto' => 'motto',
        'home_championship' => 'home_championship'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'team_number' => 'setTeamNumber',
        'nickname' => 'setNickname',
        'name' => 'setName',
        'school_name' => 'setSchoolName',
        'city' => 'setCity',
        'state_prov' => 'setStateProv',
        'country' => 'setCountry',
        'address' => 'setAddress',
        'postal_code' => 'setPostalCode',
        'gmaps_place_id' => 'setGmapsPlaceId',
        'gmaps_url' => 'setGmapsUrl',
        'lat' => 'setLat',
        'lng' => 'setLng',
        'location_name' => 'setLocationName',
        'website' => 'setWebsite',
        'rookie_year' => 'setRookieYear',
        'motto' => 'setMotto',
        'home_championship' => 'setHomeChampionship'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'team_number' => 'getTeamNumber',
        'nickname' => 'getNickname',
        'name' => 'getName',
        'school_name' => 'getSchoolName',
        'city' => 'getCity',
        'state_prov' => 'getStateProv',
        'country' => 'getCountry',
        'address' => 'getAddress',
        'postal_code' => 'getPostalCode',
        'gmaps_place_id' => 'getGmapsPlaceId',
        'gmaps_url' => 'getGmapsUrl',
        'lat' => 'getLat',
        'lng' => 'getLng',
        'location_name' => 'getLocationName',
        'website' => 'getWebsite',
        'rookie_year' => 'getRookieYear',
        'motto' => 'getMotto',
        'home_championship' => 'getHomeChampionship'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['team_number'] = isset($data['team_number']) ? $data['team_number'] : null;
        $this->container['nickname'] = isset($data['nickname']) ? $data['nickname'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['school_name'] = isset($data['school_name']) ? $data['school_name'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state_prov'] = isset($data['state_prov']) ? $data['state_prov'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['gmaps_place_id'] = isset($data['gmaps_place_id']) ? $data['gmaps_place_id'] : null;
        $this->container['gmaps_url'] = isset($data['gmaps_url']) ? $data['gmaps_url'] : null;
        $this->container['lat'] = isset($data['lat']) ? $data['lat'] : null;
        $this->container['lng'] = isset($data['lng']) ? $data['lng'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['rookie_year'] = isset($data['rookie_year']) ? $data['rookie_year'] : null;
        $this->container['motto'] = isset($data['motto']) ? $data['motto'] : null;
        $this->container['home_championship'] = isset($data['home_championship']) ? $data['home_championship'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        if ($this->container['team_number'] === null) {
            $invalidProperties[] = "'team_number' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key TBA team key with the format `frcXXXX` with `XXXX` representing the team number.
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets team_number
     *
     * @return int
     */
    public function getTeamNumber()
    {
        return $this->container['team_number'];
    }

    /**
     * Sets team_number
     *
     * @param int $team_number Official team number issued by FIRST.
     *
     * @return $this
     */
    public function setTeamNumber($team_number)
    {
        $this->container['team_number'] = $team_number;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname Team nickname provided by FIRST.
     *
     * @return $this
     */
    public function setNickname($nickname)
    {
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Official long name registered with FIRST.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets school_name
     *
     * @return string|null
     */
    public function getSchoolName()
    {
        return $this->container['school_name'];
    }

    /**
     * Sets school_name
     *
     * @param string|null $school_name Name of team school or affilited group registered with FIRST.
     *
     * @return $this
     */
    public function setSchoolName($school_name)
    {
        $this->container['school_name'] = $school_name;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City of team derived from parsing the address registered with FIRST.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state_prov
     *
     * @return string|null
     */
    public function getStateProv()
    {
        return $this->container['state_prov'];
    }

    /**
     * Sets state_prov
     *
     * @param string|null $state_prov State of team derived from parsing the address registered with FIRST.
     *
     * @return $this
     */
    public function setStateProv($state_prov)
    {
        $this->container['state_prov'] = $state_prov;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country of team derived from parsing the address registered with FIRST.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address Will be NULL, for future development.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code Postal code from the team address.
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets gmaps_place_id
     *
     * @return string|null
     */
    public function getGmapsPlaceId()
    {
        return $this->container['gmaps_place_id'];
    }

    /**
     * Sets gmaps_place_id
     *
     * @param string|null $gmaps_place_id Will be NULL, for future development.
     *
     * @return $this
     */
    public function setGmapsPlaceId($gmaps_place_id)
    {
        $this->container['gmaps_place_id'] = $gmaps_place_id;

        return $this;
    }

    /**
     * Gets gmaps_url
     *
     * @return string|null
     */
    public function getGmapsUrl()
    {
        return $this->container['gmaps_url'];
    }

    /**
     * Sets gmaps_url
     *
     * @param string|null $gmaps_url Will be NULL, for future development.
     *
     * @return $this
     */
    public function setGmapsUrl($gmaps_url)
    {
        $this->container['gmaps_url'] = $gmaps_url;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return double|null
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param double|null $lat Will be NULL, for future development.
     *
     * @return $this
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets lng
     *
     * @return double|null
     */
    public function getLng()
    {
        return $this->container['lng'];
    }

    /**
     * Sets lng
     *
     * @param double|null $lng Will be NULL, for future development.
     *
     * @return $this
     */
    public function setLng($lng)
    {
        $this->container['lng'] = $lng;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string|null
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string|null $location_name Will be NULL, for future development.
     *
     * @return $this
     */
    public function setLocationName($location_name)
    {
        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website Official website associated with the team.
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets rookie_year
     *
     * @return int|null
     */
    public function getRookieYear()
    {
        return $this->container['rookie_year'];
    }

    /**
     * Sets rookie_year
     *
     * @param int|null $rookie_year First year the team officially competed.
     *
     * @return $this
     */
    public function setRookieYear($rookie_year)
    {
        $this->container['rookie_year'] = $rookie_year;

        return $this;
    }

    /**
     * Gets motto
     *
     * @return string|null
     */
    public function getMotto()
    {
        return $this->container['motto'];
    }

    /**
     * Sets motto
     *
     * @param string|null $motto Team's motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019.
     *
     * @return $this
     */
    public function setMotto($motto)
    {
        $this->container['motto'] = $motto;

        return $this;
    }

    /**
     * Gets home_championship
     *
     * @return object|null
     */
    public function getHomeChampionship()
    {
        return $this->container['home_championship'];
    }

    /**
     * Sets home_championship
     *
     * @param object|null $home_championship Location of the team's home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value.
     *
     * @return $this
     */
    public function setHomeChampionship($home_championship)
    {
        $this->container['home_championship'] = $home_championship;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


