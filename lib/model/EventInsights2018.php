<?php
/**
 * EventInsights2018
 *
 * PHP version 5
 *
 * @category Class
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TBAAPI\v3client\TBAAPI\v3client\model;

use \ArrayAccess;
use \TBAAPI\v3client\ObjectSerializer;

/**
 * EventInsights2018 Class Doc Comment
 *
 * @category Class
 * @description Insights for FIRST Power Up qualification and elimination matches.
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EventInsights2018 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Event_Insights_2018';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auto_quest_achieved' => 'float[]',
        'average_boost_played' => 'float',
        'average_endgame_points' => 'float',
        'average_force_played' => 'float',
        'average_foul_score' => 'float',
        'average_points_auto' => 'float',
        'average_points_teleop' => 'float',
        'average_run_points_auto' => 'float',
        'average_scale_ownership_points' => 'float',
        'average_scale_ownership_points_auto' => 'float',
        'average_scale_ownership_points_teleop' => 'float',
        'average_score' => 'float',
        'average_switch_ownership_points' => 'float',
        'average_switch_ownership_points_auto' => 'float',
        'average_switch_ownership_points_teleop' => 'float',
        'average_vault_points' => 'float',
        'average_win_margin' => 'float',
        'average_win_score' => 'float',
        'boost_played_counts' => 'float[]',
        'climb_counts' => 'float[]',
        'face_the_boss_achieved' => 'float[]',
        'force_played_counts' => 'float[]',
        'high_score' => 'string[]',
        'levitate_played_counts' => 'float[]',
        'run_counts_auto' => 'float[]',
        'scale_neutral_percentage' => 'float',
        'scale_neutral_percentage_auto' => 'float',
        'scale_neutral_percentage_teleop' => 'float',
        'switch_owned_counts_auto' => 'float[]',
        'unicorn_matches' => 'float[]',
        'winning_opp_switch_denial_percentage_teleop' => 'float',
        'winning_own_switch_ownership_percentage' => 'float',
        'winning_own_switch_ownership_percentage_auto' => 'float',
        'winning_own_switch_ownership_percentage_teleop' => 'float',
        'winning_scale_ownership_percentage' => 'float',
        'winning_scale_ownership_percentage_auto' => 'float',
        'winning_scale_ownership_percentage_teleop' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'auto_quest_achieved' => 'float',
        'average_boost_played' => 'float',
        'average_endgame_points' => 'float',
        'average_force_played' => 'float',
        'average_foul_score' => 'float',
        'average_points_auto' => 'float',
        'average_points_teleop' => 'float',
        'average_run_points_auto' => 'float',
        'average_scale_ownership_points' => 'float',
        'average_scale_ownership_points_auto' => 'float',
        'average_scale_ownership_points_teleop' => 'float',
        'average_score' => 'float',
        'average_switch_ownership_points' => 'float',
        'average_switch_ownership_points_auto' => 'float',
        'average_switch_ownership_points_teleop' => 'float',
        'average_vault_points' => 'float',
        'average_win_margin' => 'float',
        'average_win_score' => 'float',
        'boost_played_counts' => 'float',
        'climb_counts' => 'float',
        'face_the_boss_achieved' => 'float',
        'force_played_counts' => 'float',
        'high_score' => null,
        'levitate_played_counts' => 'float',
        'run_counts_auto' => 'float',
        'scale_neutral_percentage' => 'float',
        'scale_neutral_percentage_auto' => 'float',
        'scale_neutral_percentage_teleop' => 'float',
        'switch_owned_counts_auto' => 'float',
        'unicorn_matches' => 'float',
        'winning_opp_switch_denial_percentage_teleop' => 'float',
        'winning_own_switch_ownership_percentage' => 'float',
        'winning_own_switch_ownership_percentage_auto' => 'float',
        'winning_own_switch_ownership_percentage_teleop' => 'float',
        'winning_scale_ownership_percentage' => 'float',
        'winning_scale_ownership_percentage_auto' => 'float',
        'winning_scale_ownership_percentage_teleop' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_quest_achieved' => 'auto_quest_achieved',
        'average_boost_played' => 'average_boost_played',
        'average_endgame_points' => 'average_endgame_points',
        'average_force_played' => 'average_force_played',
        'average_foul_score' => 'average_foul_score',
        'average_points_auto' => 'average_points_auto',
        'average_points_teleop' => 'average_points_teleop',
        'average_run_points_auto' => 'average_run_points_auto',
        'average_scale_ownership_points' => 'average_scale_ownership_points',
        'average_scale_ownership_points_auto' => 'average_scale_ownership_points_auto',
        'average_scale_ownership_points_teleop' => 'average_scale_ownership_points_teleop',
        'average_score' => 'average_score',
        'average_switch_ownership_points' => 'average_switch_ownership_points',
        'average_switch_ownership_points_auto' => 'average_switch_ownership_points_auto',
        'average_switch_ownership_points_teleop' => 'average_switch_ownership_points_teleop',
        'average_vault_points' => 'average_vault_points',
        'average_win_margin' => 'average_win_margin',
        'average_win_score' => 'average_win_score',
        'boost_played_counts' => 'boost_played_counts',
        'climb_counts' => 'climb_counts',
        'face_the_boss_achieved' => 'face_the_boss_achieved',
        'force_played_counts' => 'force_played_counts',
        'high_score' => 'high_score',
        'levitate_played_counts' => 'levitate_played_counts',
        'run_counts_auto' => 'run_counts_auto',
        'scale_neutral_percentage' => 'scale_neutral_percentage',
        'scale_neutral_percentage_auto' => 'scale_neutral_percentage_auto',
        'scale_neutral_percentage_teleop' => 'scale_neutral_percentage_teleop',
        'switch_owned_counts_auto' => 'switch_owned_counts_auto',
        'unicorn_matches' => 'unicorn_matches',
        'winning_opp_switch_denial_percentage_teleop' => 'winning_opp_switch_denial_percentage_teleop',
        'winning_own_switch_ownership_percentage' => 'winning_own_switch_ownership_percentage',
        'winning_own_switch_ownership_percentage_auto' => 'winning_own_switch_ownership_percentage_auto',
        'winning_own_switch_ownership_percentage_teleop' => 'winning_own_switch_ownership_percentage_teleop',
        'winning_scale_ownership_percentage' => 'winning_scale_ownership_percentage',
        'winning_scale_ownership_percentage_auto' => 'winning_scale_ownership_percentage_auto',
        'winning_scale_ownership_percentage_teleop' => 'winning_scale_ownership_percentage_teleop'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_quest_achieved' => 'setAutoQuestAchieved',
        'average_boost_played' => 'setAverageBoostPlayed',
        'average_endgame_points' => 'setAverageEndgamePoints',
        'average_force_played' => 'setAverageForcePlayed',
        'average_foul_score' => 'setAverageFoulScore',
        'average_points_auto' => 'setAveragePointsAuto',
        'average_points_teleop' => 'setAveragePointsTeleop',
        'average_run_points_auto' => 'setAverageRunPointsAuto',
        'average_scale_ownership_points' => 'setAverageScaleOwnershipPoints',
        'average_scale_ownership_points_auto' => 'setAverageScaleOwnershipPointsAuto',
        'average_scale_ownership_points_teleop' => 'setAverageScaleOwnershipPointsTeleop',
        'average_score' => 'setAverageScore',
        'average_switch_ownership_points' => 'setAverageSwitchOwnershipPoints',
        'average_switch_ownership_points_auto' => 'setAverageSwitchOwnershipPointsAuto',
        'average_switch_ownership_points_teleop' => 'setAverageSwitchOwnershipPointsTeleop',
        'average_vault_points' => 'setAverageVaultPoints',
        'average_win_margin' => 'setAverageWinMargin',
        'average_win_score' => 'setAverageWinScore',
        'boost_played_counts' => 'setBoostPlayedCounts',
        'climb_counts' => 'setClimbCounts',
        'face_the_boss_achieved' => 'setFaceTheBossAchieved',
        'force_played_counts' => 'setForcePlayedCounts',
        'high_score' => 'setHighScore',
        'levitate_played_counts' => 'setLevitatePlayedCounts',
        'run_counts_auto' => 'setRunCountsAuto',
        'scale_neutral_percentage' => 'setScaleNeutralPercentage',
        'scale_neutral_percentage_auto' => 'setScaleNeutralPercentageAuto',
        'scale_neutral_percentage_teleop' => 'setScaleNeutralPercentageTeleop',
        'switch_owned_counts_auto' => 'setSwitchOwnedCountsAuto',
        'unicorn_matches' => 'setUnicornMatches',
        'winning_opp_switch_denial_percentage_teleop' => 'setWinningOppSwitchDenialPercentageTeleop',
        'winning_own_switch_ownership_percentage' => 'setWinningOwnSwitchOwnershipPercentage',
        'winning_own_switch_ownership_percentage_auto' => 'setWinningOwnSwitchOwnershipPercentageAuto',
        'winning_own_switch_ownership_percentage_teleop' => 'setWinningOwnSwitchOwnershipPercentageTeleop',
        'winning_scale_ownership_percentage' => 'setWinningScaleOwnershipPercentage',
        'winning_scale_ownership_percentage_auto' => 'setWinningScaleOwnershipPercentageAuto',
        'winning_scale_ownership_percentage_teleop' => 'setWinningScaleOwnershipPercentageTeleop'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_quest_achieved' => 'getAutoQuestAchieved',
        'average_boost_played' => 'getAverageBoostPlayed',
        'average_endgame_points' => 'getAverageEndgamePoints',
        'average_force_played' => 'getAverageForcePlayed',
        'average_foul_score' => 'getAverageFoulScore',
        'average_points_auto' => 'getAveragePointsAuto',
        'average_points_teleop' => 'getAveragePointsTeleop',
        'average_run_points_auto' => 'getAverageRunPointsAuto',
        'average_scale_ownership_points' => 'getAverageScaleOwnershipPoints',
        'average_scale_ownership_points_auto' => 'getAverageScaleOwnershipPointsAuto',
        'average_scale_ownership_points_teleop' => 'getAverageScaleOwnershipPointsTeleop',
        'average_score' => 'getAverageScore',
        'average_switch_ownership_points' => 'getAverageSwitchOwnershipPoints',
        'average_switch_ownership_points_auto' => 'getAverageSwitchOwnershipPointsAuto',
        'average_switch_ownership_points_teleop' => 'getAverageSwitchOwnershipPointsTeleop',
        'average_vault_points' => 'getAverageVaultPoints',
        'average_win_margin' => 'getAverageWinMargin',
        'average_win_score' => 'getAverageWinScore',
        'boost_played_counts' => 'getBoostPlayedCounts',
        'climb_counts' => 'getClimbCounts',
        'face_the_boss_achieved' => 'getFaceTheBossAchieved',
        'force_played_counts' => 'getForcePlayedCounts',
        'high_score' => 'getHighScore',
        'levitate_played_counts' => 'getLevitatePlayedCounts',
        'run_counts_auto' => 'getRunCountsAuto',
        'scale_neutral_percentage' => 'getScaleNeutralPercentage',
        'scale_neutral_percentage_auto' => 'getScaleNeutralPercentageAuto',
        'scale_neutral_percentage_teleop' => 'getScaleNeutralPercentageTeleop',
        'switch_owned_counts_auto' => 'getSwitchOwnedCountsAuto',
        'unicorn_matches' => 'getUnicornMatches',
        'winning_opp_switch_denial_percentage_teleop' => 'getWinningOppSwitchDenialPercentageTeleop',
        'winning_own_switch_ownership_percentage' => 'getWinningOwnSwitchOwnershipPercentage',
        'winning_own_switch_ownership_percentage_auto' => 'getWinningOwnSwitchOwnershipPercentageAuto',
        'winning_own_switch_ownership_percentage_teleop' => 'getWinningOwnSwitchOwnershipPercentageTeleop',
        'winning_scale_ownership_percentage' => 'getWinningScaleOwnershipPercentage',
        'winning_scale_ownership_percentage_auto' => 'getWinningScaleOwnershipPercentageAuto',
        'winning_scale_ownership_percentage_teleop' => 'getWinningScaleOwnershipPercentageTeleop'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_quest_achieved'] = isset($data['auto_quest_achieved']) ? $data['auto_quest_achieved'] : null;
        $this->container['average_boost_played'] = isset($data['average_boost_played']) ? $data['average_boost_played'] : null;
        $this->container['average_endgame_points'] = isset($data['average_endgame_points']) ? $data['average_endgame_points'] : null;
        $this->container['average_force_played'] = isset($data['average_force_played']) ? $data['average_force_played'] : null;
        $this->container['average_foul_score'] = isset($data['average_foul_score']) ? $data['average_foul_score'] : null;
        $this->container['average_points_auto'] = isset($data['average_points_auto']) ? $data['average_points_auto'] : null;
        $this->container['average_points_teleop'] = isset($data['average_points_teleop']) ? $data['average_points_teleop'] : null;
        $this->container['average_run_points_auto'] = isset($data['average_run_points_auto']) ? $data['average_run_points_auto'] : null;
        $this->container['average_scale_ownership_points'] = isset($data['average_scale_ownership_points']) ? $data['average_scale_ownership_points'] : null;
        $this->container['average_scale_ownership_points_auto'] = isset($data['average_scale_ownership_points_auto']) ? $data['average_scale_ownership_points_auto'] : null;
        $this->container['average_scale_ownership_points_teleop'] = isset($data['average_scale_ownership_points_teleop']) ? $data['average_scale_ownership_points_teleop'] : null;
        $this->container['average_score'] = isset($data['average_score']) ? $data['average_score'] : null;
        $this->container['average_switch_ownership_points'] = isset($data['average_switch_ownership_points']) ? $data['average_switch_ownership_points'] : null;
        $this->container['average_switch_ownership_points_auto'] = isset($data['average_switch_ownership_points_auto']) ? $data['average_switch_ownership_points_auto'] : null;
        $this->container['average_switch_ownership_points_teleop'] = isset($data['average_switch_ownership_points_teleop']) ? $data['average_switch_ownership_points_teleop'] : null;
        $this->container['average_vault_points'] = isset($data['average_vault_points']) ? $data['average_vault_points'] : null;
        $this->container['average_win_margin'] = isset($data['average_win_margin']) ? $data['average_win_margin'] : null;
        $this->container['average_win_score'] = isset($data['average_win_score']) ? $data['average_win_score'] : null;
        $this->container['boost_played_counts'] = isset($data['boost_played_counts']) ? $data['boost_played_counts'] : null;
        $this->container['climb_counts'] = isset($data['climb_counts']) ? $data['climb_counts'] : null;
        $this->container['face_the_boss_achieved'] = isset($data['face_the_boss_achieved']) ? $data['face_the_boss_achieved'] : null;
        $this->container['force_played_counts'] = isset($data['force_played_counts']) ? $data['force_played_counts'] : null;
        $this->container['high_score'] = isset($data['high_score']) ? $data['high_score'] : null;
        $this->container['levitate_played_counts'] = isset($data['levitate_played_counts']) ? $data['levitate_played_counts'] : null;
        $this->container['run_counts_auto'] = isset($data['run_counts_auto']) ? $data['run_counts_auto'] : null;
        $this->container['scale_neutral_percentage'] = isset($data['scale_neutral_percentage']) ? $data['scale_neutral_percentage'] : null;
        $this->container['scale_neutral_percentage_auto'] = isset($data['scale_neutral_percentage_auto']) ? $data['scale_neutral_percentage_auto'] : null;
        $this->container['scale_neutral_percentage_teleop'] = isset($data['scale_neutral_percentage_teleop']) ? $data['scale_neutral_percentage_teleop'] : null;
        $this->container['switch_owned_counts_auto'] = isset($data['switch_owned_counts_auto']) ? $data['switch_owned_counts_auto'] : null;
        $this->container['unicorn_matches'] = isset($data['unicorn_matches']) ? $data['unicorn_matches'] : null;
        $this->container['winning_opp_switch_denial_percentage_teleop'] = isset($data['winning_opp_switch_denial_percentage_teleop']) ? $data['winning_opp_switch_denial_percentage_teleop'] : null;
        $this->container['winning_own_switch_ownership_percentage'] = isset($data['winning_own_switch_ownership_percentage']) ? $data['winning_own_switch_ownership_percentage'] : null;
        $this->container['winning_own_switch_ownership_percentage_auto'] = isset($data['winning_own_switch_ownership_percentage_auto']) ? $data['winning_own_switch_ownership_percentage_auto'] : null;
        $this->container['winning_own_switch_ownership_percentage_teleop'] = isset($data['winning_own_switch_ownership_percentage_teleop']) ? $data['winning_own_switch_ownership_percentage_teleop'] : null;
        $this->container['winning_scale_ownership_percentage'] = isset($data['winning_scale_ownership_percentage']) ? $data['winning_scale_ownership_percentage'] : null;
        $this->container['winning_scale_ownership_percentage_auto'] = isset($data['winning_scale_ownership_percentage_auto']) ? $data['winning_scale_ownership_percentage_auto'] : null;
        $this->container['winning_scale_ownership_percentage_teleop'] = isset($data['winning_scale_ownership_percentage_teleop']) ? $data['winning_scale_ownership_percentage_teleop'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['auto_quest_achieved'] === null) {
            $invalidProperties[] = "'auto_quest_achieved' can't be null";
        }
        if ($this->container['average_boost_played'] === null) {
            $invalidProperties[] = "'average_boost_played' can't be null";
        }
        if ($this->container['average_endgame_points'] === null) {
            $invalidProperties[] = "'average_endgame_points' can't be null";
        }
        if ($this->container['average_force_played'] === null) {
            $invalidProperties[] = "'average_force_played' can't be null";
        }
        if ($this->container['average_foul_score'] === null) {
            $invalidProperties[] = "'average_foul_score' can't be null";
        }
        if ($this->container['average_points_auto'] === null) {
            $invalidProperties[] = "'average_points_auto' can't be null";
        }
        if ($this->container['average_points_teleop'] === null) {
            $invalidProperties[] = "'average_points_teleop' can't be null";
        }
        if ($this->container['average_run_points_auto'] === null) {
            $invalidProperties[] = "'average_run_points_auto' can't be null";
        }
        if ($this->container['average_scale_ownership_points'] === null) {
            $invalidProperties[] = "'average_scale_ownership_points' can't be null";
        }
        if ($this->container['average_scale_ownership_points_auto'] === null) {
            $invalidProperties[] = "'average_scale_ownership_points_auto' can't be null";
        }
        if ($this->container['average_scale_ownership_points_teleop'] === null) {
            $invalidProperties[] = "'average_scale_ownership_points_teleop' can't be null";
        }
        if ($this->container['average_score'] === null) {
            $invalidProperties[] = "'average_score' can't be null";
        }
        if ($this->container['average_switch_ownership_points'] === null) {
            $invalidProperties[] = "'average_switch_ownership_points' can't be null";
        }
        if ($this->container['average_switch_ownership_points_auto'] === null) {
            $invalidProperties[] = "'average_switch_ownership_points_auto' can't be null";
        }
        if ($this->container['average_switch_ownership_points_teleop'] === null) {
            $invalidProperties[] = "'average_switch_ownership_points_teleop' can't be null";
        }
        if ($this->container['average_vault_points'] === null) {
            $invalidProperties[] = "'average_vault_points' can't be null";
        }
        if ($this->container['average_win_margin'] === null) {
            $invalidProperties[] = "'average_win_margin' can't be null";
        }
        if ($this->container['average_win_score'] === null) {
            $invalidProperties[] = "'average_win_score' can't be null";
        }
        if ($this->container['boost_played_counts'] === null) {
            $invalidProperties[] = "'boost_played_counts' can't be null";
        }
        if ($this->container['climb_counts'] === null) {
            $invalidProperties[] = "'climb_counts' can't be null";
        }
        if ($this->container['face_the_boss_achieved'] === null) {
            $invalidProperties[] = "'face_the_boss_achieved' can't be null";
        }
        if ($this->container['force_played_counts'] === null) {
            $invalidProperties[] = "'force_played_counts' can't be null";
        }
        if ($this->container['high_score'] === null) {
            $invalidProperties[] = "'high_score' can't be null";
        }
        if ($this->container['levitate_played_counts'] === null) {
            $invalidProperties[] = "'levitate_played_counts' can't be null";
        }
        if ($this->container['run_counts_auto'] === null) {
            $invalidProperties[] = "'run_counts_auto' can't be null";
        }
        if ($this->container['scale_neutral_percentage'] === null) {
            $invalidProperties[] = "'scale_neutral_percentage' can't be null";
        }
        if ($this->container['scale_neutral_percentage_auto'] === null) {
            $invalidProperties[] = "'scale_neutral_percentage_auto' can't be null";
        }
        if ($this->container['scale_neutral_percentage_teleop'] === null) {
            $invalidProperties[] = "'scale_neutral_percentage_teleop' can't be null";
        }
        if ($this->container['switch_owned_counts_auto'] === null) {
            $invalidProperties[] = "'switch_owned_counts_auto' can't be null";
        }
        if ($this->container['unicorn_matches'] === null) {
            $invalidProperties[] = "'unicorn_matches' can't be null";
        }
        if ($this->container['winning_opp_switch_denial_percentage_teleop'] === null) {
            $invalidProperties[] = "'winning_opp_switch_denial_percentage_teleop' can't be null";
        }
        if ($this->container['winning_own_switch_ownership_percentage'] === null) {
            $invalidProperties[] = "'winning_own_switch_ownership_percentage' can't be null";
        }
        if ($this->container['winning_own_switch_ownership_percentage_auto'] === null) {
            $invalidProperties[] = "'winning_own_switch_ownership_percentage_auto' can't be null";
        }
        if ($this->container['winning_own_switch_ownership_percentage_teleop'] === null) {
            $invalidProperties[] = "'winning_own_switch_ownership_percentage_teleop' can't be null";
        }
        if ($this->container['winning_scale_ownership_percentage'] === null) {
            $invalidProperties[] = "'winning_scale_ownership_percentage' can't be null";
        }
        if ($this->container['winning_scale_ownership_percentage_auto'] === null) {
            $invalidProperties[] = "'winning_scale_ownership_percentage_auto' can't be null";
        }
        if ($this->container['winning_scale_ownership_percentage_teleop'] === null) {
            $invalidProperties[] = "'winning_scale_ownership_percentage_teleop' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_quest_achieved
     *
     * @return float[]
     */
    public function getAutoQuestAchieved()
    {
        return $this->container['auto_quest_achieved'];
    }

    /**
     * Sets auto_quest_achieved
     *
     * @param float[] $auto_quest_achieved An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.
     *
     * @return $this
     */
    public function setAutoQuestAchieved($auto_quest_achieved)
    {
        $this->container['auto_quest_achieved'] = $auto_quest_achieved;

        return $this;
    }

    /**
     * Gets average_boost_played
     *
     * @return float
     */
    public function getAverageBoostPlayed()
    {
        return $this->container['average_boost_played'];
    }

    /**
     * Sets average_boost_played
     *
     * @param float $average_boost_played Average number of boost power up scored (out of 3).
     *
     * @return $this
     */
    public function setAverageBoostPlayed($average_boost_played)
    {
        $this->container['average_boost_played'] = $average_boost_played;

        return $this;
    }

    /**
     * Gets average_endgame_points
     *
     * @return float
     */
    public function getAverageEndgamePoints()
    {
        return $this->container['average_endgame_points'];
    }

    /**
     * Sets average_endgame_points
     *
     * @param float $average_endgame_points Average endgame points.
     *
     * @return $this
     */
    public function setAverageEndgamePoints($average_endgame_points)
    {
        $this->container['average_endgame_points'] = $average_endgame_points;

        return $this;
    }

    /**
     * Gets average_force_played
     *
     * @return float
     */
    public function getAverageForcePlayed()
    {
        return $this->container['average_force_played'];
    }

    /**
     * Sets average_force_played
     *
     * @param float $average_force_played Average number of force power up scored (out of 3).
     *
     * @return $this
     */
    public function setAverageForcePlayed($average_force_played)
    {
        $this->container['average_force_played'] = $average_force_played;

        return $this;
    }

    /**
     * Gets average_foul_score
     *
     * @return float
     */
    public function getAverageFoulScore()
    {
        return $this->container['average_foul_score'];
    }

    /**
     * Sets average_foul_score
     *
     * @param float $average_foul_score Average foul score.
     *
     * @return $this
     */
    public function setAverageFoulScore($average_foul_score)
    {
        $this->container['average_foul_score'] = $average_foul_score;

        return $this;
    }

    /**
     * Gets average_points_auto
     *
     * @return float
     */
    public function getAveragePointsAuto()
    {
        return $this->container['average_points_auto'];
    }

    /**
     * Sets average_points_auto
     *
     * @param float $average_points_auto Average points scored during auto.
     *
     * @return $this
     */
    public function setAveragePointsAuto($average_points_auto)
    {
        $this->container['average_points_auto'] = $average_points_auto;

        return $this;
    }

    /**
     * Gets average_points_teleop
     *
     * @return float
     */
    public function getAveragePointsTeleop()
    {
        return $this->container['average_points_teleop'];
    }

    /**
     * Sets average_points_teleop
     *
     * @param float $average_points_teleop Average points scored during teleop.
     *
     * @return $this
     */
    public function setAveragePointsTeleop($average_points_teleop)
    {
        $this->container['average_points_teleop'] = $average_points_teleop;

        return $this;
    }

    /**
     * Gets average_run_points_auto
     *
     * @return float
     */
    public function getAverageRunPointsAuto()
    {
        return $this->container['average_run_points_auto'];
    }

    /**
     * Sets average_run_points_auto
     *
     * @param float $average_run_points_auto Average mobility points scored during auto.
     *
     * @return $this
     */
    public function setAverageRunPointsAuto($average_run_points_auto)
    {
        $this->container['average_run_points_auto'] = $average_run_points_auto;

        return $this;
    }

    /**
     * Gets average_scale_ownership_points
     *
     * @return float
     */
    public function getAverageScaleOwnershipPoints()
    {
        return $this->container['average_scale_ownership_points'];
    }

    /**
     * Sets average_scale_ownership_points
     *
     * @param float $average_scale_ownership_points Average scale ownership points scored.
     *
     * @return $this
     */
    public function setAverageScaleOwnershipPoints($average_scale_ownership_points)
    {
        $this->container['average_scale_ownership_points'] = $average_scale_ownership_points;

        return $this;
    }

    /**
     * Gets average_scale_ownership_points_auto
     *
     * @return float
     */
    public function getAverageScaleOwnershipPointsAuto()
    {
        return $this->container['average_scale_ownership_points_auto'];
    }

    /**
     * Sets average_scale_ownership_points_auto
     *
     * @param float $average_scale_ownership_points_auto Average scale ownership points scored during auto.
     *
     * @return $this
     */
    public function setAverageScaleOwnershipPointsAuto($average_scale_ownership_points_auto)
    {
        $this->container['average_scale_ownership_points_auto'] = $average_scale_ownership_points_auto;

        return $this;
    }

    /**
     * Gets average_scale_ownership_points_teleop
     *
     * @return float
     */
    public function getAverageScaleOwnershipPointsTeleop()
    {
        return $this->container['average_scale_ownership_points_teleop'];
    }

    /**
     * Sets average_scale_ownership_points_teleop
     *
     * @param float $average_scale_ownership_points_teleop Average scale ownership points scored during teleop.
     *
     * @return $this
     */
    public function setAverageScaleOwnershipPointsTeleop($average_scale_ownership_points_teleop)
    {
        $this->container['average_scale_ownership_points_teleop'] = $average_scale_ownership_points_teleop;

        return $this;
    }

    /**
     * Gets average_score
     *
     * @return float
     */
    public function getAverageScore()
    {
        return $this->container['average_score'];
    }

    /**
     * Sets average_score
     *
     * @param float $average_score Average score.
     *
     * @return $this
     */
    public function setAverageScore($average_score)
    {
        $this->container['average_score'] = $average_score;

        return $this;
    }

    /**
     * Gets average_switch_ownership_points
     *
     * @return float
     */
    public function getAverageSwitchOwnershipPoints()
    {
        return $this->container['average_switch_ownership_points'];
    }

    /**
     * Sets average_switch_ownership_points
     *
     * @param float $average_switch_ownership_points Average switch ownership points scored.
     *
     * @return $this
     */
    public function setAverageSwitchOwnershipPoints($average_switch_ownership_points)
    {
        $this->container['average_switch_ownership_points'] = $average_switch_ownership_points;

        return $this;
    }

    /**
     * Gets average_switch_ownership_points_auto
     *
     * @return float
     */
    public function getAverageSwitchOwnershipPointsAuto()
    {
        return $this->container['average_switch_ownership_points_auto'];
    }

    /**
     * Sets average_switch_ownership_points_auto
     *
     * @param float $average_switch_ownership_points_auto Average switch ownership points scored during auto.
     *
     * @return $this
     */
    public function setAverageSwitchOwnershipPointsAuto($average_switch_ownership_points_auto)
    {
        $this->container['average_switch_ownership_points_auto'] = $average_switch_ownership_points_auto;

        return $this;
    }

    /**
     * Gets average_switch_ownership_points_teleop
     *
     * @return float
     */
    public function getAverageSwitchOwnershipPointsTeleop()
    {
        return $this->container['average_switch_ownership_points_teleop'];
    }

    /**
     * Sets average_switch_ownership_points_teleop
     *
     * @param float $average_switch_ownership_points_teleop Average switch ownership points scored during teleop.
     *
     * @return $this
     */
    public function setAverageSwitchOwnershipPointsTeleop($average_switch_ownership_points_teleop)
    {
        $this->container['average_switch_ownership_points_teleop'] = $average_switch_ownership_points_teleop;

        return $this;
    }

    /**
     * Gets average_vault_points
     *
     * @return float
     */
    public function getAverageVaultPoints()
    {
        return $this->container['average_vault_points'];
    }

    /**
     * Sets average_vault_points
     *
     * @param float $average_vault_points Average value points scored.
     *
     * @return $this
     */
    public function setAverageVaultPoints($average_vault_points)
    {
        $this->container['average_vault_points'] = $average_vault_points;

        return $this;
    }

    /**
     * Gets average_win_margin
     *
     * @return float
     */
    public function getAverageWinMargin()
    {
        return $this->container['average_win_margin'];
    }

    /**
     * Sets average_win_margin
     *
     * @param float $average_win_margin Average margin of victory.
     *
     * @return $this
     */
    public function setAverageWinMargin($average_win_margin)
    {
        $this->container['average_win_margin'] = $average_win_margin;

        return $this;
    }

    /**
     * Gets average_win_score
     *
     * @return float
     */
    public function getAverageWinScore()
    {
        return $this->container['average_win_score'];
    }

    /**
     * Sets average_win_score
     *
     * @param float $average_win_score Average winning score.
     *
     * @return $this
     */
    public function setAverageWinScore($average_win_score)
    {
        $this->container['average_win_score'] = $average_win_score;

        return $this;
    }

    /**
     * Gets boost_played_counts
     *
     * @return float[]
     */
    public function getBoostPlayedCounts()
    {
        return $this->container['boost_played_counts'];
    }

    /**
     * Sets boost_played_counts
     *
     * @param float[] $boost_played_counts An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.
     *
     * @return $this
     */
    public function setBoostPlayedCounts($boost_played_counts)
    {
        $this->container['boost_played_counts'] = $boost_played_counts;

        return $this;
    }

    /**
     * Gets climb_counts
     *
     * @return float[]
     */
    public function getClimbCounts()
    {
        return $this->container['climb_counts'];
    }

    /**
     * Sets climb_counts
     *
     * @param float[] $climb_counts An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.
     *
     * @return $this
     */
    public function setClimbCounts($climb_counts)
    {
        $this->container['climb_counts'] = $climb_counts;

        return $this;
    }

    /**
     * Gets face_the_boss_achieved
     *
     * @return float[]
     */
    public function getFaceTheBossAchieved()
    {
        return $this->container['face_the_boss_achieved'];
    }

    /**
     * Sets face_the_boss_achieved
     *
     * @param float[] $face_the_boss_achieved An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.
     *
     * @return $this
     */
    public function setFaceTheBossAchieved($face_the_boss_achieved)
    {
        $this->container['face_the_boss_achieved'] = $face_the_boss_achieved;

        return $this;
    }

    /**
     * Gets force_played_counts
     *
     * @return float[]
     */
    public function getForcePlayedCounts()
    {
        return $this->container['force_played_counts'];
    }

    /**
     * Sets force_played_counts
     *
     * @param float[] $force_played_counts An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.
     *
     * @return $this
     */
    public function setForcePlayedCounts($force_played_counts)
    {
        $this->container['force_played_counts'] = $force_played_counts;

        return $this;
    }

    /**
     * Gets high_score
     *
     * @return string[]
     */
    public function getHighScore()
    {
        return $this->container['high_score'];
    }

    /**
     * Sets high_score
     *
     * @param string[] $high_score An array with three values, high score, match key from the match with the high score, and the name of the match
     *
     * @return $this
     */
    public function setHighScore($high_score)
    {
        $this->container['high_score'] = $high_score;

        return $this;
    }

    /**
     * Gets levitate_played_counts
     *
     * @return float[]
     */
    public function getLevitatePlayedCounts()
    {
        return $this->container['levitate_played_counts'];
    }

    /**
     * Sets levitate_played_counts
     *
     * @param float[] $levitate_played_counts An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.
     *
     * @return $this
     */
    public function setLevitatePlayedCounts($levitate_played_counts)
    {
        $this->container['levitate_played_counts'] = $levitate_played_counts;

        return $this;
    }

    /**
     * Gets run_counts_auto
     *
     * @return float[]
     */
    public function getRunCountsAuto()
    {
        return $this->container['run_counts_auto'];
    }

    /**
     * Sets run_counts_auto
     *
     * @param float[] $run_counts_auto An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.
     *
     * @return $this
     */
    public function setRunCountsAuto($run_counts_auto)
    {
        $this->container['run_counts_auto'] = $run_counts_auto;

        return $this;
    }

    /**
     * Gets scale_neutral_percentage
     *
     * @return float
     */
    public function getScaleNeutralPercentage()
    {
        return $this->container['scale_neutral_percentage'];
    }

    /**
     * Sets scale_neutral_percentage
     *
     * @param float $scale_neutral_percentage Average scale neutral percentage.
     *
     * @return $this
     */
    public function setScaleNeutralPercentage($scale_neutral_percentage)
    {
        $this->container['scale_neutral_percentage'] = $scale_neutral_percentage;

        return $this;
    }

    /**
     * Gets scale_neutral_percentage_auto
     *
     * @return float
     */
    public function getScaleNeutralPercentageAuto()
    {
        return $this->container['scale_neutral_percentage_auto'];
    }

    /**
     * Sets scale_neutral_percentage_auto
     *
     * @param float $scale_neutral_percentage_auto Average scale neutral percentage during auto.
     *
     * @return $this
     */
    public function setScaleNeutralPercentageAuto($scale_neutral_percentage_auto)
    {
        $this->container['scale_neutral_percentage_auto'] = $scale_neutral_percentage_auto;

        return $this;
    }

    /**
     * Gets scale_neutral_percentage_teleop
     *
     * @return float
     */
    public function getScaleNeutralPercentageTeleop()
    {
        return $this->container['scale_neutral_percentage_teleop'];
    }

    /**
     * Sets scale_neutral_percentage_teleop
     *
     * @param float $scale_neutral_percentage_teleop Average scale neutral percentage during teleop.
     *
     * @return $this
     */
    public function setScaleNeutralPercentageTeleop($scale_neutral_percentage_teleop)
    {
        $this->container['scale_neutral_percentage_teleop'] = $scale_neutral_percentage_teleop;

        return $this;
    }

    /**
     * Gets switch_owned_counts_auto
     *
     * @return float[]
     */
    public function getSwitchOwnedCountsAuto()
    {
        return $this->container['switch_owned_counts_auto'];
    }

    /**
     * Sets switch_owned_counts_auto
     *
     * @param float[] $switch_owned_counts_auto An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.
     *
     * @return $this
     */
    public function setSwitchOwnedCountsAuto($switch_owned_counts_auto)
    {
        $this->container['switch_owned_counts_auto'] = $switch_owned_counts_auto;

        return $this;
    }

    /**
     * Gets unicorn_matches
     *
     * @return float[]
     */
    public function getUnicornMatches()
    {
        return $this->container['unicorn_matches'];
    }

    /**
     * Sets unicorn_matches
     *
     * @param float[] $unicorn_matches An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.
     *
     * @return $this
     */
    public function setUnicornMatches($unicorn_matches)
    {
        $this->container['unicorn_matches'] = $unicorn_matches;

        return $this;
    }

    /**
     * Gets winning_opp_switch_denial_percentage_teleop
     *
     * @return float
     */
    public function getWinningOppSwitchDenialPercentageTeleop()
    {
        return $this->container['winning_opp_switch_denial_percentage_teleop'];
    }

    /**
     * Sets winning_opp_switch_denial_percentage_teleop
     *
     * @param float $winning_opp_switch_denial_percentage_teleop Average opposing switch denail percentage for the winning alliance during teleop.
     *
     * @return $this
     */
    public function setWinningOppSwitchDenialPercentageTeleop($winning_opp_switch_denial_percentage_teleop)
    {
        $this->container['winning_opp_switch_denial_percentage_teleop'] = $winning_opp_switch_denial_percentage_teleop;

        return $this;
    }

    /**
     * Gets winning_own_switch_ownership_percentage
     *
     * @return float
     */
    public function getWinningOwnSwitchOwnershipPercentage()
    {
        return $this->container['winning_own_switch_ownership_percentage'];
    }

    /**
     * Sets winning_own_switch_ownership_percentage
     *
     * @param float $winning_own_switch_ownership_percentage Average own switch ownership percentage for the winning alliance.
     *
     * @return $this
     */
    public function setWinningOwnSwitchOwnershipPercentage($winning_own_switch_ownership_percentage)
    {
        $this->container['winning_own_switch_ownership_percentage'] = $winning_own_switch_ownership_percentage;

        return $this;
    }

    /**
     * Gets winning_own_switch_ownership_percentage_auto
     *
     * @return float
     */
    public function getWinningOwnSwitchOwnershipPercentageAuto()
    {
        return $this->container['winning_own_switch_ownership_percentage_auto'];
    }

    /**
     * Sets winning_own_switch_ownership_percentage_auto
     *
     * @param float $winning_own_switch_ownership_percentage_auto Average own switch ownership percentage for the winning alliance during auto.
     *
     * @return $this
     */
    public function setWinningOwnSwitchOwnershipPercentageAuto($winning_own_switch_ownership_percentage_auto)
    {
        $this->container['winning_own_switch_ownership_percentage_auto'] = $winning_own_switch_ownership_percentage_auto;

        return $this;
    }

    /**
     * Gets winning_own_switch_ownership_percentage_teleop
     *
     * @return float
     */
    public function getWinningOwnSwitchOwnershipPercentageTeleop()
    {
        return $this->container['winning_own_switch_ownership_percentage_teleop'];
    }

    /**
     * Sets winning_own_switch_ownership_percentage_teleop
     *
     * @param float $winning_own_switch_ownership_percentage_teleop Average own switch ownership percentage for the winning alliance during teleop.
     *
     * @return $this
     */
    public function setWinningOwnSwitchOwnershipPercentageTeleop($winning_own_switch_ownership_percentage_teleop)
    {
        $this->container['winning_own_switch_ownership_percentage_teleop'] = $winning_own_switch_ownership_percentage_teleop;

        return $this;
    }

    /**
     * Gets winning_scale_ownership_percentage
     *
     * @return float
     */
    public function getWinningScaleOwnershipPercentage()
    {
        return $this->container['winning_scale_ownership_percentage'];
    }

    /**
     * Sets winning_scale_ownership_percentage
     *
     * @param float $winning_scale_ownership_percentage Average scale ownership percentage for the winning alliance.
     *
     * @return $this
     */
    public function setWinningScaleOwnershipPercentage($winning_scale_ownership_percentage)
    {
        $this->container['winning_scale_ownership_percentage'] = $winning_scale_ownership_percentage;

        return $this;
    }

    /**
     * Gets winning_scale_ownership_percentage_auto
     *
     * @return float
     */
    public function getWinningScaleOwnershipPercentageAuto()
    {
        return $this->container['winning_scale_ownership_percentage_auto'];
    }

    /**
     * Sets winning_scale_ownership_percentage_auto
     *
     * @param float $winning_scale_ownership_percentage_auto Average scale ownership percentage for the winning alliance during auto.
     *
     * @return $this
     */
    public function setWinningScaleOwnershipPercentageAuto($winning_scale_ownership_percentage_auto)
    {
        $this->container['winning_scale_ownership_percentage_auto'] = $winning_scale_ownership_percentage_auto;

        return $this;
    }

    /**
     * Gets winning_scale_ownership_percentage_teleop
     *
     * @return float
     */
    public function getWinningScaleOwnershipPercentageTeleop()
    {
        return $this->container['winning_scale_ownership_percentage_teleop'];
    }

    /**
     * Sets winning_scale_ownership_percentage_teleop
     *
     * @param float $winning_scale_ownership_percentage_teleop Average scale ownership percentage for the winning alliance during teleop.
     *
     * @return $this
     */
    public function setWinningScaleOwnershipPercentageTeleop($winning_scale_ownership_percentage_teleop)
    {
        $this->container['winning_scale_ownership_percentage_teleop'] = $winning_scale_ownership_percentage_teleop;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


