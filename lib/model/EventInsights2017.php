<?php
/**
 * EventInsights2017
 *
 * PHP version 5
 *
 * @category Class
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TBAAPI\v3client\TBAAPI\v3client\model;

use \ArrayAccess;
use \TBAAPI\v3client\ObjectSerializer;

/**
 * EventInsights2017 Class Doc Comment
 *
 * @category Class
 * @description Insights for FIRST STEAMWORKS qualification and elimination matches.
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EventInsights2017 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Event_Insights_2017';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'average_foul_score' => 'float',
        'average_fuel_points' => 'float',
        'average_fuel_points_auto' => 'float',
        'average_fuel_points_teleop' => 'float',
        'average_high_goals' => 'float',
        'average_high_goals_auto' => 'float',
        'average_high_goals_teleop' => 'float',
        'average_low_goals' => 'float',
        'average_low_goals_auto' => 'float',
        'average_low_goals_teleop' => 'float',
        'average_mobility_points_auto' => 'float',
        'average_points_auto' => 'float',
        'average_points_teleop' => 'float',
        'average_rotor_points' => 'float',
        'average_rotor_points_auto' => 'float',
        'average_rotor_points_teleop' => 'float',
        'average_score' => 'float',
        'average_takeoff_points_teleop' => 'float',
        'average_win_margin' => 'float',
        'average_win_score' => 'float',
        'high_kpa' => 'string[]',
        'high_score' => 'string[]',
        'kpa_achieved' => 'float[]',
        'mobility_counts' => 'float[]',
        'rotor_1_engaged' => 'float[]',
        'rotor_1_engaged_auto' => 'float[]',
        'rotor_2_engaged' => 'float[]',
        'rotor_2_engaged_auto' => 'float[]',
        'rotor_3_engaged' => 'float[]',
        'rotor_4_engaged' => 'float[]',
        'takeoff_counts' => 'float[]',
        'unicorn_matches' => 'float[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'average_foul_score' => 'float',
        'average_fuel_points' => 'float',
        'average_fuel_points_auto' => 'float',
        'average_fuel_points_teleop' => 'float',
        'average_high_goals' => 'float',
        'average_high_goals_auto' => 'float',
        'average_high_goals_teleop' => 'float',
        'average_low_goals' => 'float',
        'average_low_goals_auto' => 'float',
        'average_low_goals_teleop' => 'float',
        'average_mobility_points_auto' => 'float',
        'average_points_auto' => 'float',
        'average_points_teleop' => 'float',
        'average_rotor_points' => 'float',
        'average_rotor_points_auto' => 'float',
        'average_rotor_points_teleop' => 'float',
        'average_score' => 'float',
        'average_takeoff_points_teleop' => 'float',
        'average_win_margin' => 'float',
        'average_win_score' => 'float',
        'high_kpa' => null,
        'high_score' => null,
        'kpa_achieved' => 'float',
        'mobility_counts' => 'float',
        'rotor_1_engaged' => 'float',
        'rotor_1_engaged_auto' => 'float',
        'rotor_2_engaged' => 'float',
        'rotor_2_engaged_auto' => 'float',
        'rotor_3_engaged' => 'float',
        'rotor_4_engaged' => 'float',
        'takeoff_counts' => 'float',
        'unicorn_matches' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'average_foul_score' => 'average_foul_score',
        'average_fuel_points' => 'average_fuel_points',
        'average_fuel_points_auto' => 'average_fuel_points_auto',
        'average_fuel_points_teleop' => 'average_fuel_points_teleop',
        'average_high_goals' => 'average_high_goals',
        'average_high_goals_auto' => 'average_high_goals_auto',
        'average_high_goals_teleop' => 'average_high_goals_teleop',
        'average_low_goals' => 'average_low_goals',
        'average_low_goals_auto' => 'average_low_goals_auto',
        'average_low_goals_teleop' => 'average_low_goals_teleop',
        'average_mobility_points_auto' => 'average_mobility_points_auto',
        'average_points_auto' => 'average_points_auto',
        'average_points_teleop' => 'average_points_teleop',
        'average_rotor_points' => 'average_rotor_points',
        'average_rotor_points_auto' => 'average_rotor_points_auto',
        'average_rotor_points_teleop' => 'average_rotor_points_teleop',
        'average_score' => 'average_score',
        'average_takeoff_points_teleop' => 'average_takeoff_points_teleop',
        'average_win_margin' => 'average_win_margin',
        'average_win_score' => 'average_win_score',
        'high_kpa' => 'high_kpa',
        'high_score' => 'high_score',
        'kpa_achieved' => 'kpa_achieved',
        'mobility_counts' => 'mobility_counts',
        'rotor_1_engaged' => 'rotor_1_engaged',
        'rotor_1_engaged_auto' => 'rotor_1_engaged_auto',
        'rotor_2_engaged' => 'rotor_2_engaged',
        'rotor_2_engaged_auto' => 'rotor_2_engaged_auto',
        'rotor_3_engaged' => 'rotor_3_engaged',
        'rotor_4_engaged' => 'rotor_4_engaged',
        'takeoff_counts' => 'takeoff_counts',
        'unicorn_matches' => 'unicorn_matches'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'average_foul_score' => 'setAverageFoulScore',
        'average_fuel_points' => 'setAverageFuelPoints',
        'average_fuel_points_auto' => 'setAverageFuelPointsAuto',
        'average_fuel_points_teleop' => 'setAverageFuelPointsTeleop',
        'average_high_goals' => 'setAverageHighGoals',
        'average_high_goals_auto' => 'setAverageHighGoalsAuto',
        'average_high_goals_teleop' => 'setAverageHighGoalsTeleop',
        'average_low_goals' => 'setAverageLowGoals',
        'average_low_goals_auto' => 'setAverageLowGoalsAuto',
        'average_low_goals_teleop' => 'setAverageLowGoalsTeleop',
        'average_mobility_points_auto' => 'setAverageMobilityPointsAuto',
        'average_points_auto' => 'setAveragePointsAuto',
        'average_points_teleop' => 'setAveragePointsTeleop',
        'average_rotor_points' => 'setAverageRotorPoints',
        'average_rotor_points_auto' => 'setAverageRotorPointsAuto',
        'average_rotor_points_teleop' => 'setAverageRotorPointsTeleop',
        'average_score' => 'setAverageScore',
        'average_takeoff_points_teleop' => 'setAverageTakeoffPointsTeleop',
        'average_win_margin' => 'setAverageWinMargin',
        'average_win_score' => 'setAverageWinScore',
        'high_kpa' => 'setHighKpa',
        'high_score' => 'setHighScore',
        'kpa_achieved' => 'setKpaAchieved',
        'mobility_counts' => 'setMobilityCounts',
        'rotor_1_engaged' => 'setRotor1Engaged',
        'rotor_1_engaged_auto' => 'setRotor1EngagedAuto',
        'rotor_2_engaged' => 'setRotor2Engaged',
        'rotor_2_engaged_auto' => 'setRotor2EngagedAuto',
        'rotor_3_engaged' => 'setRotor3Engaged',
        'rotor_4_engaged' => 'setRotor4Engaged',
        'takeoff_counts' => 'setTakeoffCounts',
        'unicorn_matches' => 'setUnicornMatches'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'average_foul_score' => 'getAverageFoulScore',
        'average_fuel_points' => 'getAverageFuelPoints',
        'average_fuel_points_auto' => 'getAverageFuelPointsAuto',
        'average_fuel_points_teleop' => 'getAverageFuelPointsTeleop',
        'average_high_goals' => 'getAverageHighGoals',
        'average_high_goals_auto' => 'getAverageHighGoalsAuto',
        'average_high_goals_teleop' => 'getAverageHighGoalsTeleop',
        'average_low_goals' => 'getAverageLowGoals',
        'average_low_goals_auto' => 'getAverageLowGoalsAuto',
        'average_low_goals_teleop' => 'getAverageLowGoalsTeleop',
        'average_mobility_points_auto' => 'getAverageMobilityPointsAuto',
        'average_points_auto' => 'getAveragePointsAuto',
        'average_points_teleop' => 'getAveragePointsTeleop',
        'average_rotor_points' => 'getAverageRotorPoints',
        'average_rotor_points_auto' => 'getAverageRotorPointsAuto',
        'average_rotor_points_teleop' => 'getAverageRotorPointsTeleop',
        'average_score' => 'getAverageScore',
        'average_takeoff_points_teleop' => 'getAverageTakeoffPointsTeleop',
        'average_win_margin' => 'getAverageWinMargin',
        'average_win_score' => 'getAverageWinScore',
        'high_kpa' => 'getHighKpa',
        'high_score' => 'getHighScore',
        'kpa_achieved' => 'getKpaAchieved',
        'mobility_counts' => 'getMobilityCounts',
        'rotor_1_engaged' => 'getRotor1Engaged',
        'rotor_1_engaged_auto' => 'getRotor1EngagedAuto',
        'rotor_2_engaged' => 'getRotor2Engaged',
        'rotor_2_engaged_auto' => 'getRotor2EngagedAuto',
        'rotor_3_engaged' => 'getRotor3Engaged',
        'rotor_4_engaged' => 'getRotor4Engaged',
        'takeoff_counts' => 'getTakeoffCounts',
        'unicorn_matches' => 'getUnicornMatches'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['average_foul_score'] = isset($data['average_foul_score']) ? $data['average_foul_score'] : null;
        $this->container['average_fuel_points'] = isset($data['average_fuel_points']) ? $data['average_fuel_points'] : null;
        $this->container['average_fuel_points_auto'] = isset($data['average_fuel_points_auto']) ? $data['average_fuel_points_auto'] : null;
        $this->container['average_fuel_points_teleop'] = isset($data['average_fuel_points_teleop']) ? $data['average_fuel_points_teleop'] : null;
        $this->container['average_high_goals'] = isset($data['average_high_goals']) ? $data['average_high_goals'] : null;
        $this->container['average_high_goals_auto'] = isset($data['average_high_goals_auto']) ? $data['average_high_goals_auto'] : null;
        $this->container['average_high_goals_teleop'] = isset($data['average_high_goals_teleop']) ? $data['average_high_goals_teleop'] : null;
        $this->container['average_low_goals'] = isset($data['average_low_goals']) ? $data['average_low_goals'] : null;
        $this->container['average_low_goals_auto'] = isset($data['average_low_goals_auto']) ? $data['average_low_goals_auto'] : null;
        $this->container['average_low_goals_teleop'] = isset($data['average_low_goals_teleop']) ? $data['average_low_goals_teleop'] : null;
        $this->container['average_mobility_points_auto'] = isset($data['average_mobility_points_auto']) ? $data['average_mobility_points_auto'] : null;
        $this->container['average_points_auto'] = isset($data['average_points_auto']) ? $data['average_points_auto'] : null;
        $this->container['average_points_teleop'] = isset($data['average_points_teleop']) ? $data['average_points_teleop'] : null;
        $this->container['average_rotor_points'] = isset($data['average_rotor_points']) ? $data['average_rotor_points'] : null;
        $this->container['average_rotor_points_auto'] = isset($data['average_rotor_points_auto']) ? $data['average_rotor_points_auto'] : null;
        $this->container['average_rotor_points_teleop'] = isset($data['average_rotor_points_teleop']) ? $data['average_rotor_points_teleop'] : null;
        $this->container['average_score'] = isset($data['average_score']) ? $data['average_score'] : null;
        $this->container['average_takeoff_points_teleop'] = isset($data['average_takeoff_points_teleop']) ? $data['average_takeoff_points_teleop'] : null;
        $this->container['average_win_margin'] = isset($data['average_win_margin']) ? $data['average_win_margin'] : null;
        $this->container['average_win_score'] = isset($data['average_win_score']) ? $data['average_win_score'] : null;
        $this->container['high_kpa'] = isset($data['high_kpa']) ? $data['high_kpa'] : null;
        $this->container['high_score'] = isset($data['high_score']) ? $data['high_score'] : null;
        $this->container['kpa_achieved'] = isset($data['kpa_achieved']) ? $data['kpa_achieved'] : null;
        $this->container['mobility_counts'] = isset($data['mobility_counts']) ? $data['mobility_counts'] : null;
        $this->container['rotor_1_engaged'] = isset($data['rotor_1_engaged']) ? $data['rotor_1_engaged'] : null;
        $this->container['rotor_1_engaged_auto'] = isset($data['rotor_1_engaged_auto']) ? $data['rotor_1_engaged_auto'] : null;
        $this->container['rotor_2_engaged'] = isset($data['rotor_2_engaged']) ? $data['rotor_2_engaged'] : null;
        $this->container['rotor_2_engaged_auto'] = isset($data['rotor_2_engaged_auto']) ? $data['rotor_2_engaged_auto'] : null;
        $this->container['rotor_3_engaged'] = isset($data['rotor_3_engaged']) ? $data['rotor_3_engaged'] : null;
        $this->container['rotor_4_engaged'] = isset($data['rotor_4_engaged']) ? $data['rotor_4_engaged'] : null;
        $this->container['takeoff_counts'] = isset($data['takeoff_counts']) ? $data['takeoff_counts'] : null;
        $this->container['unicorn_matches'] = isset($data['unicorn_matches']) ? $data['unicorn_matches'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['average_foul_score'] === null) {
            $invalidProperties[] = "'average_foul_score' can't be null";
        }
        if ($this->container['average_fuel_points'] === null) {
            $invalidProperties[] = "'average_fuel_points' can't be null";
        }
        if ($this->container['average_fuel_points_auto'] === null) {
            $invalidProperties[] = "'average_fuel_points_auto' can't be null";
        }
        if ($this->container['average_fuel_points_teleop'] === null) {
            $invalidProperties[] = "'average_fuel_points_teleop' can't be null";
        }
        if ($this->container['average_high_goals'] === null) {
            $invalidProperties[] = "'average_high_goals' can't be null";
        }
        if ($this->container['average_high_goals_auto'] === null) {
            $invalidProperties[] = "'average_high_goals_auto' can't be null";
        }
        if ($this->container['average_high_goals_teleop'] === null) {
            $invalidProperties[] = "'average_high_goals_teleop' can't be null";
        }
        if ($this->container['average_low_goals'] === null) {
            $invalidProperties[] = "'average_low_goals' can't be null";
        }
        if ($this->container['average_low_goals_auto'] === null) {
            $invalidProperties[] = "'average_low_goals_auto' can't be null";
        }
        if ($this->container['average_low_goals_teleop'] === null) {
            $invalidProperties[] = "'average_low_goals_teleop' can't be null";
        }
        if ($this->container['average_mobility_points_auto'] === null) {
            $invalidProperties[] = "'average_mobility_points_auto' can't be null";
        }
        if ($this->container['average_points_auto'] === null) {
            $invalidProperties[] = "'average_points_auto' can't be null";
        }
        if ($this->container['average_points_teleop'] === null) {
            $invalidProperties[] = "'average_points_teleop' can't be null";
        }
        if ($this->container['average_rotor_points'] === null) {
            $invalidProperties[] = "'average_rotor_points' can't be null";
        }
        if ($this->container['average_rotor_points_auto'] === null) {
            $invalidProperties[] = "'average_rotor_points_auto' can't be null";
        }
        if ($this->container['average_rotor_points_teleop'] === null) {
            $invalidProperties[] = "'average_rotor_points_teleop' can't be null";
        }
        if ($this->container['average_score'] === null) {
            $invalidProperties[] = "'average_score' can't be null";
        }
        if ($this->container['average_takeoff_points_teleop'] === null) {
            $invalidProperties[] = "'average_takeoff_points_teleop' can't be null";
        }
        if ($this->container['average_win_margin'] === null) {
            $invalidProperties[] = "'average_win_margin' can't be null";
        }
        if ($this->container['average_win_score'] === null) {
            $invalidProperties[] = "'average_win_score' can't be null";
        }
        if ($this->container['high_kpa'] === null) {
            $invalidProperties[] = "'high_kpa' can't be null";
        }
        if ($this->container['high_score'] === null) {
            $invalidProperties[] = "'high_score' can't be null";
        }
        if ($this->container['kpa_achieved'] === null) {
            $invalidProperties[] = "'kpa_achieved' can't be null";
        }
        if ($this->container['mobility_counts'] === null) {
            $invalidProperties[] = "'mobility_counts' can't be null";
        }
        if ($this->container['rotor_1_engaged'] === null) {
            $invalidProperties[] = "'rotor_1_engaged' can't be null";
        }
        if ($this->container['rotor_1_engaged_auto'] === null) {
            $invalidProperties[] = "'rotor_1_engaged_auto' can't be null";
        }
        if ($this->container['rotor_2_engaged'] === null) {
            $invalidProperties[] = "'rotor_2_engaged' can't be null";
        }
        if ($this->container['rotor_2_engaged_auto'] === null) {
            $invalidProperties[] = "'rotor_2_engaged_auto' can't be null";
        }
        if ($this->container['rotor_3_engaged'] === null) {
            $invalidProperties[] = "'rotor_3_engaged' can't be null";
        }
        if ($this->container['rotor_4_engaged'] === null) {
            $invalidProperties[] = "'rotor_4_engaged' can't be null";
        }
        if ($this->container['takeoff_counts'] === null) {
            $invalidProperties[] = "'takeoff_counts' can't be null";
        }
        if ($this->container['unicorn_matches'] === null) {
            $invalidProperties[] = "'unicorn_matches' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets average_foul_score
     *
     * @return float
     */
    public function getAverageFoulScore()
    {
        return $this->container['average_foul_score'];
    }

    /**
     * Sets average_foul_score
     *
     * @param float $average_foul_score Average foul score.
     *
     * @return $this
     */
    public function setAverageFoulScore($average_foul_score)
    {
        $this->container['average_foul_score'] = $average_foul_score;

        return $this;
    }

    /**
     * Gets average_fuel_points
     *
     * @return float
     */
    public function getAverageFuelPoints()
    {
        return $this->container['average_fuel_points'];
    }

    /**
     * Sets average_fuel_points
     *
     * @param float $average_fuel_points Average fuel points scored.
     *
     * @return $this
     */
    public function setAverageFuelPoints($average_fuel_points)
    {
        $this->container['average_fuel_points'] = $average_fuel_points;

        return $this;
    }

    /**
     * Gets average_fuel_points_auto
     *
     * @return float
     */
    public function getAverageFuelPointsAuto()
    {
        return $this->container['average_fuel_points_auto'];
    }

    /**
     * Sets average_fuel_points_auto
     *
     * @param float $average_fuel_points_auto Average fuel points scored during auto.
     *
     * @return $this
     */
    public function setAverageFuelPointsAuto($average_fuel_points_auto)
    {
        $this->container['average_fuel_points_auto'] = $average_fuel_points_auto;

        return $this;
    }

    /**
     * Gets average_fuel_points_teleop
     *
     * @return float
     */
    public function getAverageFuelPointsTeleop()
    {
        return $this->container['average_fuel_points_teleop'];
    }

    /**
     * Sets average_fuel_points_teleop
     *
     * @param float $average_fuel_points_teleop Average fuel points scored during teleop.
     *
     * @return $this
     */
    public function setAverageFuelPointsTeleop($average_fuel_points_teleop)
    {
        $this->container['average_fuel_points_teleop'] = $average_fuel_points_teleop;

        return $this;
    }

    /**
     * Gets average_high_goals
     *
     * @return float
     */
    public function getAverageHighGoals()
    {
        return $this->container['average_high_goals'];
    }

    /**
     * Sets average_high_goals
     *
     * @param float $average_high_goals Average points scored in the high goal.
     *
     * @return $this
     */
    public function setAverageHighGoals($average_high_goals)
    {
        $this->container['average_high_goals'] = $average_high_goals;

        return $this;
    }

    /**
     * Gets average_high_goals_auto
     *
     * @return float
     */
    public function getAverageHighGoalsAuto()
    {
        return $this->container['average_high_goals_auto'];
    }

    /**
     * Sets average_high_goals_auto
     *
     * @param float $average_high_goals_auto Average points scored in the high goal during auto.
     *
     * @return $this
     */
    public function setAverageHighGoalsAuto($average_high_goals_auto)
    {
        $this->container['average_high_goals_auto'] = $average_high_goals_auto;

        return $this;
    }

    /**
     * Gets average_high_goals_teleop
     *
     * @return float
     */
    public function getAverageHighGoalsTeleop()
    {
        return $this->container['average_high_goals_teleop'];
    }

    /**
     * Sets average_high_goals_teleop
     *
     * @param float $average_high_goals_teleop Average points scored in the high goal during teleop.
     *
     * @return $this
     */
    public function setAverageHighGoalsTeleop($average_high_goals_teleop)
    {
        $this->container['average_high_goals_teleop'] = $average_high_goals_teleop;

        return $this;
    }

    /**
     * Gets average_low_goals
     *
     * @return float
     */
    public function getAverageLowGoals()
    {
        return $this->container['average_low_goals'];
    }

    /**
     * Sets average_low_goals
     *
     * @param float $average_low_goals Average points scored in the low goal.
     *
     * @return $this
     */
    public function setAverageLowGoals($average_low_goals)
    {
        $this->container['average_low_goals'] = $average_low_goals;

        return $this;
    }

    /**
     * Gets average_low_goals_auto
     *
     * @return float
     */
    public function getAverageLowGoalsAuto()
    {
        return $this->container['average_low_goals_auto'];
    }

    /**
     * Sets average_low_goals_auto
     *
     * @param float $average_low_goals_auto Average points scored in the low goal during auto.
     *
     * @return $this
     */
    public function setAverageLowGoalsAuto($average_low_goals_auto)
    {
        $this->container['average_low_goals_auto'] = $average_low_goals_auto;

        return $this;
    }

    /**
     * Gets average_low_goals_teleop
     *
     * @return float
     */
    public function getAverageLowGoalsTeleop()
    {
        return $this->container['average_low_goals_teleop'];
    }

    /**
     * Sets average_low_goals_teleop
     *
     * @param float $average_low_goals_teleop Average points scored in the low goal during teleop.
     *
     * @return $this
     */
    public function setAverageLowGoalsTeleop($average_low_goals_teleop)
    {
        $this->container['average_low_goals_teleop'] = $average_low_goals_teleop;

        return $this;
    }

    /**
     * Gets average_mobility_points_auto
     *
     * @return float
     */
    public function getAverageMobilityPointsAuto()
    {
        return $this->container['average_mobility_points_auto'];
    }

    /**
     * Sets average_mobility_points_auto
     *
     * @param float $average_mobility_points_auto Average mobility points scored during auto.
     *
     * @return $this
     */
    public function setAverageMobilityPointsAuto($average_mobility_points_auto)
    {
        $this->container['average_mobility_points_auto'] = $average_mobility_points_auto;

        return $this;
    }

    /**
     * Gets average_points_auto
     *
     * @return float
     */
    public function getAveragePointsAuto()
    {
        return $this->container['average_points_auto'];
    }

    /**
     * Sets average_points_auto
     *
     * @param float $average_points_auto Average points scored during auto.
     *
     * @return $this
     */
    public function setAveragePointsAuto($average_points_auto)
    {
        $this->container['average_points_auto'] = $average_points_auto;

        return $this;
    }

    /**
     * Gets average_points_teleop
     *
     * @return float
     */
    public function getAveragePointsTeleop()
    {
        return $this->container['average_points_teleop'];
    }

    /**
     * Sets average_points_teleop
     *
     * @param float $average_points_teleop Average points scored during teleop.
     *
     * @return $this
     */
    public function setAveragePointsTeleop($average_points_teleop)
    {
        $this->container['average_points_teleop'] = $average_points_teleop;

        return $this;
    }

    /**
     * Gets average_rotor_points
     *
     * @return float
     */
    public function getAverageRotorPoints()
    {
        return $this->container['average_rotor_points'];
    }

    /**
     * Sets average_rotor_points
     *
     * @param float $average_rotor_points Average rotor points scored.
     *
     * @return $this
     */
    public function setAverageRotorPoints($average_rotor_points)
    {
        $this->container['average_rotor_points'] = $average_rotor_points;

        return $this;
    }

    /**
     * Gets average_rotor_points_auto
     *
     * @return float
     */
    public function getAverageRotorPointsAuto()
    {
        return $this->container['average_rotor_points_auto'];
    }

    /**
     * Sets average_rotor_points_auto
     *
     * @param float $average_rotor_points_auto Average rotor points scored during auto.
     *
     * @return $this
     */
    public function setAverageRotorPointsAuto($average_rotor_points_auto)
    {
        $this->container['average_rotor_points_auto'] = $average_rotor_points_auto;

        return $this;
    }

    /**
     * Gets average_rotor_points_teleop
     *
     * @return float
     */
    public function getAverageRotorPointsTeleop()
    {
        return $this->container['average_rotor_points_teleop'];
    }

    /**
     * Sets average_rotor_points_teleop
     *
     * @param float $average_rotor_points_teleop Average rotor points scored during teleop.
     *
     * @return $this
     */
    public function setAverageRotorPointsTeleop($average_rotor_points_teleop)
    {
        $this->container['average_rotor_points_teleop'] = $average_rotor_points_teleop;

        return $this;
    }

    /**
     * Gets average_score
     *
     * @return float
     */
    public function getAverageScore()
    {
        return $this->container['average_score'];
    }

    /**
     * Sets average_score
     *
     * @param float $average_score Average score.
     *
     * @return $this
     */
    public function setAverageScore($average_score)
    {
        $this->container['average_score'] = $average_score;

        return $this;
    }

    /**
     * Gets average_takeoff_points_teleop
     *
     * @return float
     */
    public function getAverageTakeoffPointsTeleop()
    {
        return $this->container['average_takeoff_points_teleop'];
    }

    /**
     * Sets average_takeoff_points_teleop
     *
     * @param float $average_takeoff_points_teleop Average takeoff points scored during teleop.
     *
     * @return $this
     */
    public function setAverageTakeoffPointsTeleop($average_takeoff_points_teleop)
    {
        $this->container['average_takeoff_points_teleop'] = $average_takeoff_points_teleop;

        return $this;
    }

    /**
     * Gets average_win_margin
     *
     * @return float
     */
    public function getAverageWinMargin()
    {
        return $this->container['average_win_margin'];
    }

    /**
     * Sets average_win_margin
     *
     * @param float $average_win_margin Average margin of victory.
     *
     * @return $this
     */
    public function setAverageWinMargin($average_win_margin)
    {
        $this->container['average_win_margin'] = $average_win_margin;

        return $this;
    }

    /**
     * Gets average_win_score
     *
     * @return float
     */
    public function getAverageWinScore()
    {
        return $this->container['average_win_score'];
    }

    /**
     * Sets average_win_score
     *
     * @param float $average_win_score Average winning score.
     *
     * @return $this
     */
    public function setAverageWinScore($average_win_score)
    {
        $this->container['average_win_score'] = $average_win_score;

        return $this;
    }

    /**
     * Gets high_kpa
     *
     * @return string[]
     */
    public function getHighKpa()
    {
        return $this->container['high_kpa'];
    }

    /**
     * Sets high_kpa
     *
     * @param string[] $high_kpa An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match
     *
     * @return $this
     */
    public function setHighKpa($high_kpa)
    {
        $this->container['high_kpa'] = $high_kpa;

        return $this;
    }

    /**
     * Gets high_score
     *
     * @return string[]
     */
    public function getHighScore()
    {
        return $this->container['high_score'];
    }

    /**
     * Sets high_score
     *
     * @param string[] $high_score An array with three values, high score, match key from the match with the high score, and the name of the match
     *
     * @return $this
     */
    public function setHighScore($high_score)
    {
        $this->container['high_score'] = $high_score;

        return $this;
    }

    /**
     * Gets kpa_achieved
     *
     * @return float[]
     */
    public function getKpaAchieved()
    {
        return $this->container['kpa_achieved'];
    }

    /**
     * Sets kpa_achieved
     *
     * @param float[] $kpa_achieved An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.
     *
     * @return $this
     */
    public function setKpaAchieved($kpa_achieved)
    {
        $this->container['kpa_achieved'] = $kpa_achieved;

        return $this;
    }

    /**
     * Gets mobility_counts
     *
     * @return float[]
     */
    public function getMobilityCounts()
    {
        return $this->container['mobility_counts'];
    }

    /**
     * Sets mobility_counts
     *
     * @param float[] $mobility_counts An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.
     *
     * @return $this
     */
    public function setMobilityCounts($mobility_counts)
    {
        $this->container['mobility_counts'] = $mobility_counts;

        return $this;
    }

    /**
     * Gets rotor_1_engaged
     *
     * @return float[]
     */
    public function getRotor1Engaged()
    {
        return $this->container['rotor_1_engaged'];
    }

    /**
     * Sets rotor_1_engaged
     *
     * @param float[] $rotor_1_engaged An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.
     *
     * @return $this
     */
    public function setRotor1Engaged($rotor_1_engaged)
    {
        $this->container['rotor_1_engaged'] = $rotor_1_engaged;

        return $this;
    }

    /**
     * Gets rotor_1_engaged_auto
     *
     * @return float[]
     */
    public function getRotor1EngagedAuto()
    {
        return $this->container['rotor_1_engaged_auto'];
    }

    /**
     * Sets rotor_1_engaged_auto
     *
     * @param float[] $rotor_1_engaged_auto An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.
     *
     * @return $this
     */
    public function setRotor1EngagedAuto($rotor_1_engaged_auto)
    {
        $this->container['rotor_1_engaged_auto'] = $rotor_1_engaged_auto;

        return $this;
    }

    /**
     * Gets rotor_2_engaged
     *
     * @return float[]
     */
    public function getRotor2Engaged()
    {
        return $this->container['rotor_2_engaged'];
    }

    /**
     * Sets rotor_2_engaged
     *
     * @param float[] $rotor_2_engaged An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.
     *
     * @return $this
     */
    public function setRotor2Engaged($rotor_2_engaged)
    {
        $this->container['rotor_2_engaged'] = $rotor_2_engaged;

        return $this;
    }

    /**
     * Gets rotor_2_engaged_auto
     *
     * @return float[]
     */
    public function getRotor2EngagedAuto()
    {
        return $this->container['rotor_2_engaged_auto'];
    }

    /**
     * Sets rotor_2_engaged_auto
     *
     * @param float[] $rotor_2_engaged_auto An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.
     *
     * @return $this
     */
    public function setRotor2EngagedAuto($rotor_2_engaged_auto)
    {
        $this->container['rotor_2_engaged_auto'] = $rotor_2_engaged_auto;

        return $this;
    }

    /**
     * Gets rotor_3_engaged
     *
     * @return float[]
     */
    public function getRotor3Engaged()
    {
        return $this->container['rotor_3_engaged'];
    }

    /**
     * Sets rotor_3_engaged
     *
     * @param float[] $rotor_3_engaged An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.
     *
     * @return $this
     */
    public function setRotor3Engaged($rotor_3_engaged)
    {
        $this->container['rotor_3_engaged'] = $rotor_3_engaged;

        return $this;
    }

    /**
     * Gets rotor_4_engaged
     *
     * @return float[]
     */
    public function getRotor4Engaged()
    {
        return $this->container['rotor_4_engaged'];
    }

    /**
     * Sets rotor_4_engaged
     *
     * @param float[] $rotor_4_engaged An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.
     *
     * @return $this
     */
    public function setRotor4Engaged($rotor_4_engaged)
    {
        $this->container['rotor_4_engaged'] = $rotor_4_engaged;

        return $this;
    }

    /**
     * Gets takeoff_counts
     *
     * @return float[]
     */
    public function getTakeoffCounts()
    {
        return $this->container['takeoff_counts'];
    }

    /**
     * Sets takeoff_counts
     *
     * @param float[] $takeoff_counts An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.
     *
     * @return $this
     */
    public function setTakeoffCounts($takeoff_counts)
    {
        $this->container['takeoff_counts'] = $takeoff_counts;

        return $this;
    }

    /**
     * Gets unicorn_matches
     *
     * @return float[]
     */
    public function getUnicornMatches()
    {
        return $this->container['unicorn_matches'];
    }

    /**
     * Sets unicorn_matches
     *
     * @param float[] $unicorn_matches An array with three values, number of times a unicorn match (Win + kPa & Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.
     *
     * @return $this
     */
    public function setUnicornMatches($unicorn_matches)
    {
        $this->container['unicorn_matches'] = $unicorn_matches;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


