<?php
/**
 * MatchScoreBreakdown2016Alliance
 *
 * PHP version 5
 *
 * @category Class
 * @package  TBA-API\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TBA-API\v3client\TBA-API\v3client\model;

use \ArrayAccess;
use \TBA-API\v3client\ObjectSerializer;

/**
 * MatchScoreBreakdown2016Alliance Class Doc Comment
 *
 * @category Class
 * @package  TBA-API\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MatchScoreBreakdown2016Alliance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Match_Score_Breakdown_2016_Alliance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auto_points' => 'int',
        'teleop_points' => 'int',
        'breach_points' => 'int',
        'foul_points' => 'int',
        'capture_points' => 'int',
        'adjust_points' => 'int',
        'total_points' => 'int',
        'robot1_auto' => 'string',
        'robot2_auto' => 'string',
        'robot3_auto' => 'string',
        'auto_reach_points' => 'int',
        'auto_crossing_points' => 'int',
        'auto_boulders_low' => 'int',
        'auto_boulders_high' => 'int',
        'auto_boulder_points' => 'int',
        'teleop_crossing_points' => 'int',
        'teleop_boulders_low' => 'int',
        'teleop_boulders_high' => 'int',
        'teleop_boulder_points' => 'int',
        'teleop_defenses_breached' => 'bool',
        'teleop_challenge_points' => 'int',
        'teleop_scale_points' => 'int',
        'teleop_tower_captured' => 'int',
        'tower_face_a' => 'string',
        'tower_face_b' => 'string',
        'tower_face_c' => 'string',
        'tower_end_strength' => 'int',
        'tech_foul_count' => 'int',
        'foul_count' => 'int',
        'position2' => 'string',
        'position3' => 'string',
        'position4' => 'string',
        'position5' => 'string',
        'position1crossings' => 'int',
        'position2crossings' => 'int',
        'position3crossings' => 'int',
        'position4crossings' => 'int',
        'position5crossings' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'auto_points' => null,
        'teleop_points' => null,
        'breach_points' => null,
        'foul_points' => null,
        'capture_points' => null,
        'adjust_points' => null,
        'total_points' => null,
        'robot1_auto' => null,
        'robot2_auto' => null,
        'robot3_auto' => null,
        'auto_reach_points' => null,
        'auto_crossing_points' => null,
        'auto_boulders_low' => null,
        'auto_boulders_high' => null,
        'auto_boulder_points' => null,
        'teleop_crossing_points' => null,
        'teleop_boulders_low' => null,
        'teleop_boulders_high' => null,
        'teleop_boulder_points' => null,
        'teleop_defenses_breached' => null,
        'teleop_challenge_points' => null,
        'teleop_scale_points' => null,
        'teleop_tower_captured' => null,
        'tower_face_a' => null,
        'tower_face_b' => null,
        'tower_face_c' => null,
        'tower_end_strength' => null,
        'tech_foul_count' => null,
        'foul_count' => null,
        'position2' => null,
        'position3' => null,
        'position4' => null,
        'position5' => null,
        'position1crossings' => null,
        'position2crossings' => null,
        'position3crossings' => null,
        'position4crossings' => null,
        'position5crossings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_points' => 'autoPoints',
        'teleop_points' => 'teleopPoints',
        'breach_points' => 'breachPoints',
        'foul_points' => 'foulPoints',
        'capture_points' => 'capturePoints',
        'adjust_points' => 'adjustPoints',
        'total_points' => 'totalPoints',
        'robot1_auto' => 'robot1Auto',
        'robot2_auto' => 'robot2Auto',
        'robot3_auto' => 'robot3Auto',
        'auto_reach_points' => 'autoReachPoints',
        'auto_crossing_points' => 'autoCrossingPoints',
        'auto_boulders_low' => 'autoBouldersLow',
        'auto_boulders_high' => 'autoBouldersHigh',
        'auto_boulder_points' => 'autoBoulderPoints',
        'teleop_crossing_points' => 'teleopCrossingPoints',
        'teleop_boulders_low' => 'teleopBouldersLow',
        'teleop_boulders_high' => 'teleopBouldersHigh',
        'teleop_boulder_points' => 'teleopBoulderPoints',
        'teleop_defenses_breached' => 'teleopDefensesBreached',
        'teleop_challenge_points' => 'teleopChallengePoints',
        'teleop_scale_points' => 'teleopScalePoints',
        'teleop_tower_captured' => 'teleopTowerCaptured',
        'tower_face_a' => 'towerFaceA',
        'tower_face_b' => 'towerFaceB',
        'tower_face_c' => 'towerFaceC',
        'tower_end_strength' => 'towerEndStrength',
        'tech_foul_count' => 'techFoulCount',
        'foul_count' => 'foulCount',
        'position2' => 'position2',
        'position3' => 'position3',
        'position4' => 'position4',
        'position5' => 'position5',
        'position1crossings' => 'position1crossings',
        'position2crossings' => 'position2crossings',
        'position3crossings' => 'position3crossings',
        'position4crossings' => 'position4crossings',
        'position5crossings' => 'position5crossings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_points' => 'setAutoPoints',
        'teleop_points' => 'setTeleopPoints',
        'breach_points' => 'setBreachPoints',
        'foul_points' => 'setFoulPoints',
        'capture_points' => 'setCapturePoints',
        'adjust_points' => 'setAdjustPoints',
        'total_points' => 'setTotalPoints',
        'robot1_auto' => 'setRobot1Auto',
        'robot2_auto' => 'setRobot2Auto',
        'robot3_auto' => 'setRobot3Auto',
        'auto_reach_points' => 'setAutoReachPoints',
        'auto_crossing_points' => 'setAutoCrossingPoints',
        'auto_boulders_low' => 'setAutoBouldersLow',
        'auto_boulders_high' => 'setAutoBouldersHigh',
        'auto_boulder_points' => 'setAutoBoulderPoints',
        'teleop_crossing_points' => 'setTeleopCrossingPoints',
        'teleop_boulders_low' => 'setTeleopBouldersLow',
        'teleop_boulders_high' => 'setTeleopBouldersHigh',
        'teleop_boulder_points' => 'setTeleopBoulderPoints',
        'teleop_defenses_breached' => 'setTeleopDefensesBreached',
        'teleop_challenge_points' => 'setTeleopChallengePoints',
        'teleop_scale_points' => 'setTeleopScalePoints',
        'teleop_tower_captured' => 'setTeleopTowerCaptured',
        'tower_face_a' => 'setTowerFaceA',
        'tower_face_b' => 'setTowerFaceB',
        'tower_face_c' => 'setTowerFaceC',
        'tower_end_strength' => 'setTowerEndStrength',
        'tech_foul_count' => 'setTechFoulCount',
        'foul_count' => 'setFoulCount',
        'position2' => 'setPosition2',
        'position3' => 'setPosition3',
        'position4' => 'setPosition4',
        'position5' => 'setPosition5',
        'position1crossings' => 'setPosition1crossings',
        'position2crossings' => 'setPosition2crossings',
        'position3crossings' => 'setPosition3crossings',
        'position4crossings' => 'setPosition4crossings',
        'position5crossings' => 'setPosition5crossings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_points' => 'getAutoPoints',
        'teleop_points' => 'getTeleopPoints',
        'breach_points' => 'getBreachPoints',
        'foul_points' => 'getFoulPoints',
        'capture_points' => 'getCapturePoints',
        'adjust_points' => 'getAdjustPoints',
        'total_points' => 'getTotalPoints',
        'robot1_auto' => 'getRobot1Auto',
        'robot2_auto' => 'getRobot2Auto',
        'robot3_auto' => 'getRobot3Auto',
        'auto_reach_points' => 'getAutoReachPoints',
        'auto_crossing_points' => 'getAutoCrossingPoints',
        'auto_boulders_low' => 'getAutoBouldersLow',
        'auto_boulders_high' => 'getAutoBouldersHigh',
        'auto_boulder_points' => 'getAutoBoulderPoints',
        'teleop_crossing_points' => 'getTeleopCrossingPoints',
        'teleop_boulders_low' => 'getTeleopBouldersLow',
        'teleop_boulders_high' => 'getTeleopBouldersHigh',
        'teleop_boulder_points' => 'getTeleopBoulderPoints',
        'teleop_defenses_breached' => 'getTeleopDefensesBreached',
        'teleop_challenge_points' => 'getTeleopChallengePoints',
        'teleop_scale_points' => 'getTeleopScalePoints',
        'teleop_tower_captured' => 'getTeleopTowerCaptured',
        'tower_face_a' => 'getTowerFaceA',
        'tower_face_b' => 'getTowerFaceB',
        'tower_face_c' => 'getTowerFaceC',
        'tower_end_strength' => 'getTowerEndStrength',
        'tech_foul_count' => 'getTechFoulCount',
        'foul_count' => 'getFoulCount',
        'position2' => 'getPosition2',
        'position3' => 'getPosition3',
        'position4' => 'getPosition4',
        'position5' => 'getPosition5',
        'position1crossings' => 'getPosition1crossings',
        'position2crossings' => 'getPosition2crossings',
        'position3crossings' => 'getPosition3crossings',
        'position4crossings' => 'getPosition4crossings',
        'position5crossings' => 'getPosition5crossings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ROBOT1_AUTO_CROSSED = 'Crossed';
    const ROBOT1_AUTO_REACHED = 'Reached';
    const ROBOT1_AUTO_NONE = 'None';
    const ROBOT2_AUTO_CROSSED = 'Crossed';
    const ROBOT2_AUTO_REACHED = 'Reached';
    const ROBOT2_AUTO_NONE = 'None';
    const ROBOT3_AUTO_CROSSED = 'Crossed';
    const ROBOT3_AUTO_REACHED = 'Reached';
    const ROBOT3_AUTO_NONE = 'None';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRobot1AutoAllowableValues()
    {
        return [
            self::ROBOT1_AUTO_CROSSED,
            self::ROBOT1_AUTO_REACHED,
            self::ROBOT1_AUTO_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRobot2AutoAllowableValues()
    {
        return [
            self::ROBOT2_AUTO_CROSSED,
            self::ROBOT2_AUTO_REACHED,
            self::ROBOT2_AUTO_NONE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRobot3AutoAllowableValues()
    {
        return [
            self::ROBOT3_AUTO_CROSSED,
            self::ROBOT3_AUTO_REACHED,
            self::ROBOT3_AUTO_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['auto_points'] = isset($data['auto_points']) ? $data['auto_points'] : null;
        $this->container['teleop_points'] = isset($data['teleop_points']) ? $data['teleop_points'] : null;
        $this->container['breach_points'] = isset($data['breach_points']) ? $data['breach_points'] : null;
        $this->container['foul_points'] = isset($data['foul_points']) ? $data['foul_points'] : null;
        $this->container['capture_points'] = isset($data['capture_points']) ? $data['capture_points'] : null;
        $this->container['adjust_points'] = isset($data['adjust_points']) ? $data['adjust_points'] : null;
        $this->container['total_points'] = isset($data['total_points']) ? $data['total_points'] : null;
        $this->container['robot1_auto'] = isset($data['robot1_auto']) ? $data['robot1_auto'] : null;
        $this->container['robot2_auto'] = isset($data['robot2_auto']) ? $data['robot2_auto'] : null;
        $this->container['robot3_auto'] = isset($data['robot3_auto']) ? $data['robot3_auto'] : null;
        $this->container['auto_reach_points'] = isset($data['auto_reach_points']) ? $data['auto_reach_points'] : null;
        $this->container['auto_crossing_points'] = isset($data['auto_crossing_points']) ? $data['auto_crossing_points'] : null;
        $this->container['auto_boulders_low'] = isset($data['auto_boulders_low']) ? $data['auto_boulders_low'] : null;
        $this->container['auto_boulders_high'] = isset($data['auto_boulders_high']) ? $data['auto_boulders_high'] : null;
        $this->container['auto_boulder_points'] = isset($data['auto_boulder_points']) ? $data['auto_boulder_points'] : null;
        $this->container['teleop_crossing_points'] = isset($data['teleop_crossing_points']) ? $data['teleop_crossing_points'] : null;
        $this->container['teleop_boulders_low'] = isset($data['teleop_boulders_low']) ? $data['teleop_boulders_low'] : null;
        $this->container['teleop_boulders_high'] = isset($data['teleop_boulders_high']) ? $data['teleop_boulders_high'] : null;
        $this->container['teleop_boulder_points'] = isset($data['teleop_boulder_points']) ? $data['teleop_boulder_points'] : null;
        $this->container['teleop_defenses_breached'] = isset($data['teleop_defenses_breached']) ? $data['teleop_defenses_breached'] : null;
        $this->container['teleop_challenge_points'] = isset($data['teleop_challenge_points']) ? $data['teleop_challenge_points'] : null;
        $this->container['teleop_scale_points'] = isset($data['teleop_scale_points']) ? $data['teleop_scale_points'] : null;
        $this->container['teleop_tower_captured'] = isset($data['teleop_tower_captured']) ? $data['teleop_tower_captured'] : null;
        $this->container['tower_face_a'] = isset($data['tower_face_a']) ? $data['tower_face_a'] : null;
        $this->container['tower_face_b'] = isset($data['tower_face_b']) ? $data['tower_face_b'] : null;
        $this->container['tower_face_c'] = isset($data['tower_face_c']) ? $data['tower_face_c'] : null;
        $this->container['tower_end_strength'] = isset($data['tower_end_strength']) ? $data['tower_end_strength'] : null;
        $this->container['tech_foul_count'] = isset($data['tech_foul_count']) ? $data['tech_foul_count'] : null;
        $this->container['foul_count'] = isset($data['foul_count']) ? $data['foul_count'] : null;
        $this->container['position2'] = isset($data['position2']) ? $data['position2'] : null;
        $this->container['position3'] = isset($data['position3']) ? $data['position3'] : null;
        $this->container['position4'] = isset($data['position4']) ? $data['position4'] : null;
        $this->container['position5'] = isset($data['position5']) ? $data['position5'] : null;
        $this->container['position1crossings'] = isset($data['position1crossings']) ? $data['position1crossings'] : null;
        $this->container['position2crossings'] = isset($data['position2crossings']) ? $data['position2crossings'] : null;
        $this->container['position3crossings'] = isset($data['position3crossings']) ? $data['position3crossings'] : null;
        $this->container['position4crossings'] = isset($data['position4crossings']) ? $data['position4crossings'] : null;
        $this->container['position5crossings'] = isset($data['position5crossings']) ? $data['position5crossings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRobot1AutoAllowableValues();
        if (!is_null($this->container['robot1_auto']) && !in_array($this->container['robot1_auto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'robot1_auto', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRobot2AutoAllowableValues();
        if (!is_null($this->container['robot2_auto']) && !in_array($this->container['robot2_auto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'robot2_auto', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRobot3AutoAllowableValues();
        if (!is_null($this->container['robot3_auto']) && !in_array($this->container['robot3_auto'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'robot3_auto', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_points
     *
     * @return int|null
     */
    public function getAutoPoints()
    {
        return $this->container['auto_points'];
    }

    /**
     * Sets auto_points
     *
     * @param int|null $auto_points auto_points
     *
     * @return $this
     */
    public function setAutoPoints($auto_points)
    {
        $this->container['auto_points'] = $auto_points;

        return $this;
    }

    /**
     * Gets teleop_points
     *
     * @return int|null
     */
    public function getTeleopPoints()
    {
        return $this->container['teleop_points'];
    }

    /**
     * Sets teleop_points
     *
     * @param int|null $teleop_points teleop_points
     *
     * @return $this
     */
    public function setTeleopPoints($teleop_points)
    {
        $this->container['teleop_points'] = $teleop_points;

        return $this;
    }

    /**
     * Gets breach_points
     *
     * @return int|null
     */
    public function getBreachPoints()
    {
        return $this->container['breach_points'];
    }

    /**
     * Sets breach_points
     *
     * @param int|null $breach_points breach_points
     *
     * @return $this
     */
    public function setBreachPoints($breach_points)
    {
        $this->container['breach_points'] = $breach_points;

        return $this;
    }

    /**
     * Gets foul_points
     *
     * @return int|null
     */
    public function getFoulPoints()
    {
        return $this->container['foul_points'];
    }

    /**
     * Sets foul_points
     *
     * @param int|null $foul_points foul_points
     *
     * @return $this
     */
    public function setFoulPoints($foul_points)
    {
        $this->container['foul_points'] = $foul_points;

        return $this;
    }

    /**
     * Gets capture_points
     *
     * @return int|null
     */
    public function getCapturePoints()
    {
        return $this->container['capture_points'];
    }

    /**
     * Sets capture_points
     *
     * @param int|null $capture_points capture_points
     *
     * @return $this
     */
    public function setCapturePoints($capture_points)
    {
        $this->container['capture_points'] = $capture_points;

        return $this;
    }

    /**
     * Gets adjust_points
     *
     * @return int|null
     */
    public function getAdjustPoints()
    {
        return $this->container['adjust_points'];
    }

    /**
     * Sets adjust_points
     *
     * @param int|null $adjust_points adjust_points
     *
     * @return $this
     */
    public function setAdjustPoints($adjust_points)
    {
        $this->container['adjust_points'] = $adjust_points;

        return $this;
    }

    /**
     * Gets total_points
     *
     * @return int|null
     */
    public function getTotalPoints()
    {
        return $this->container['total_points'];
    }

    /**
     * Sets total_points
     *
     * @param int|null $total_points total_points
     *
     * @return $this
     */
    public function setTotalPoints($total_points)
    {
        $this->container['total_points'] = $total_points;

        return $this;
    }

    /**
     * Gets robot1_auto
     *
     * @return string|null
     */
    public function getRobot1Auto()
    {
        return $this->container['robot1_auto'];
    }

    /**
     * Sets robot1_auto
     *
     * @param string|null $robot1_auto robot1_auto
     *
     * @return $this
     */
    public function setRobot1Auto($robot1_auto)
    {
        $allowedValues = $this->getRobot1AutoAllowableValues();
        if (!is_null($robot1_auto) && !in_array($robot1_auto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'robot1_auto', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['robot1_auto'] = $robot1_auto;

        return $this;
    }

    /**
     * Gets robot2_auto
     *
     * @return string|null
     */
    public function getRobot2Auto()
    {
        return $this->container['robot2_auto'];
    }

    /**
     * Sets robot2_auto
     *
     * @param string|null $robot2_auto robot2_auto
     *
     * @return $this
     */
    public function setRobot2Auto($robot2_auto)
    {
        $allowedValues = $this->getRobot2AutoAllowableValues();
        if (!is_null($robot2_auto) && !in_array($robot2_auto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'robot2_auto', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['robot2_auto'] = $robot2_auto;

        return $this;
    }

    /**
     * Gets robot3_auto
     *
     * @return string|null
     */
    public function getRobot3Auto()
    {
        return $this->container['robot3_auto'];
    }

    /**
     * Sets robot3_auto
     *
     * @param string|null $robot3_auto robot3_auto
     *
     * @return $this
     */
    public function setRobot3Auto($robot3_auto)
    {
        $allowedValues = $this->getRobot3AutoAllowableValues();
        if (!is_null($robot3_auto) && !in_array($robot3_auto, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'robot3_auto', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['robot3_auto'] = $robot3_auto;

        return $this;
    }

    /**
     * Gets auto_reach_points
     *
     * @return int|null
     */
    public function getAutoReachPoints()
    {
        return $this->container['auto_reach_points'];
    }

    /**
     * Sets auto_reach_points
     *
     * @param int|null $auto_reach_points auto_reach_points
     *
     * @return $this
     */
    public function setAutoReachPoints($auto_reach_points)
    {
        $this->container['auto_reach_points'] = $auto_reach_points;

        return $this;
    }

    /**
     * Gets auto_crossing_points
     *
     * @return int|null
     */
    public function getAutoCrossingPoints()
    {
        return $this->container['auto_crossing_points'];
    }

    /**
     * Sets auto_crossing_points
     *
     * @param int|null $auto_crossing_points auto_crossing_points
     *
     * @return $this
     */
    public function setAutoCrossingPoints($auto_crossing_points)
    {
        $this->container['auto_crossing_points'] = $auto_crossing_points;

        return $this;
    }

    /**
     * Gets auto_boulders_low
     *
     * @return int|null
     */
    public function getAutoBouldersLow()
    {
        return $this->container['auto_boulders_low'];
    }

    /**
     * Sets auto_boulders_low
     *
     * @param int|null $auto_boulders_low auto_boulders_low
     *
     * @return $this
     */
    public function setAutoBouldersLow($auto_boulders_low)
    {
        $this->container['auto_boulders_low'] = $auto_boulders_low;

        return $this;
    }

    /**
     * Gets auto_boulders_high
     *
     * @return int|null
     */
    public function getAutoBouldersHigh()
    {
        return $this->container['auto_boulders_high'];
    }

    /**
     * Sets auto_boulders_high
     *
     * @param int|null $auto_boulders_high auto_boulders_high
     *
     * @return $this
     */
    public function setAutoBouldersHigh($auto_boulders_high)
    {
        $this->container['auto_boulders_high'] = $auto_boulders_high;

        return $this;
    }

    /**
     * Gets auto_boulder_points
     *
     * @return int|null
     */
    public function getAutoBoulderPoints()
    {
        return $this->container['auto_boulder_points'];
    }

    /**
     * Sets auto_boulder_points
     *
     * @param int|null $auto_boulder_points auto_boulder_points
     *
     * @return $this
     */
    public function setAutoBoulderPoints($auto_boulder_points)
    {
        $this->container['auto_boulder_points'] = $auto_boulder_points;

        return $this;
    }

    /**
     * Gets teleop_crossing_points
     *
     * @return int|null
     */
    public function getTeleopCrossingPoints()
    {
        return $this->container['teleop_crossing_points'];
    }

    /**
     * Sets teleop_crossing_points
     *
     * @param int|null $teleop_crossing_points teleop_crossing_points
     *
     * @return $this
     */
    public function setTeleopCrossingPoints($teleop_crossing_points)
    {
        $this->container['teleop_crossing_points'] = $teleop_crossing_points;

        return $this;
    }

    /**
     * Gets teleop_boulders_low
     *
     * @return int|null
     */
    public function getTeleopBouldersLow()
    {
        return $this->container['teleop_boulders_low'];
    }

    /**
     * Sets teleop_boulders_low
     *
     * @param int|null $teleop_boulders_low teleop_boulders_low
     *
     * @return $this
     */
    public function setTeleopBouldersLow($teleop_boulders_low)
    {
        $this->container['teleop_boulders_low'] = $teleop_boulders_low;

        return $this;
    }

    /**
     * Gets teleop_boulders_high
     *
     * @return int|null
     */
    public function getTeleopBouldersHigh()
    {
        return $this->container['teleop_boulders_high'];
    }

    /**
     * Sets teleop_boulders_high
     *
     * @param int|null $teleop_boulders_high teleop_boulders_high
     *
     * @return $this
     */
    public function setTeleopBouldersHigh($teleop_boulders_high)
    {
        $this->container['teleop_boulders_high'] = $teleop_boulders_high;

        return $this;
    }

    /**
     * Gets teleop_boulder_points
     *
     * @return int|null
     */
    public function getTeleopBoulderPoints()
    {
        return $this->container['teleop_boulder_points'];
    }

    /**
     * Sets teleop_boulder_points
     *
     * @param int|null $teleop_boulder_points teleop_boulder_points
     *
     * @return $this
     */
    public function setTeleopBoulderPoints($teleop_boulder_points)
    {
        $this->container['teleop_boulder_points'] = $teleop_boulder_points;

        return $this;
    }

    /**
     * Gets teleop_defenses_breached
     *
     * @return bool|null
     */
    public function getTeleopDefensesBreached()
    {
        return $this->container['teleop_defenses_breached'];
    }

    /**
     * Sets teleop_defenses_breached
     *
     * @param bool|null $teleop_defenses_breached teleop_defenses_breached
     *
     * @return $this
     */
    public function setTeleopDefensesBreached($teleop_defenses_breached)
    {
        $this->container['teleop_defenses_breached'] = $teleop_defenses_breached;

        return $this;
    }

    /**
     * Gets teleop_challenge_points
     *
     * @return int|null
     */
    public function getTeleopChallengePoints()
    {
        return $this->container['teleop_challenge_points'];
    }

    /**
     * Sets teleop_challenge_points
     *
     * @param int|null $teleop_challenge_points teleop_challenge_points
     *
     * @return $this
     */
    public function setTeleopChallengePoints($teleop_challenge_points)
    {
        $this->container['teleop_challenge_points'] = $teleop_challenge_points;

        return $this;
    }

    /**
     * Gets teleop_scale_points
     *
     * @return int|null
     */
    public function getTeleopScalePoints()
    {
        return $this->container['teleop_scale_points'];
    }

    /**
     * Sets teleop_scale_points
     *
     * @param int|null $teleop_scale_points teleop_scale_points
     *
     * @return $this
     */
    public function setTeleopScalePoints($teleop_scale_points)
    {
        $this->container['teleop_scale_points'] = $teleop_scale_points;

        return $this;
    }

    /**
     * Gets teleop_tower_captured
     *
     * @return int|null
     */
    public function getTeleopTowerCaptured()
    {
        return $this->container['teleop_tower_captured'];
    }

    /**
     * Sets teleop_tower_captured
     *
     * @param int|null $teleop_tower_captured teleop_tower_captured
     *
     * @return $this
     */
    public function setTeleopTowerCaptured($teleop_tower_captured)
    {
        $this->container['teleop_tower_captured'] = $teleop_tower_captured;

        return $this;
    }

    /**
     * Gets tower_face_a
     *
     * @return string|null
     */
    public function getTowerFaceA()
    {
        return $this->container['tower_face_a'];
    }

    /**
     * Sets tower_face_a
     *
     * @param string|null $tower_face_a tower_face_a
     *
     * @return $this
     */
    public function setTowerFaceA($tower_face_a)
    {
        $this->container['tower_face_a'] = $tower_face_a;

        return $this;
    }

    /**
     * Gets tower_face_b
     *
     * @return string|null
     */
    public function getTowerFaceB()
    {
        return $this->container['tower_face_b'];
    }

    /**
     * Sets tower_face_b
     *
     * @param string|null $tower_face_b tower_face_b
     *
     * @return $this
     */
    public function setTowerFaceB($tower_face_b)
    {
        $this->container['tower_face_b'] = $tower_face_b;

        return $this;
    }

    /**
     * Gets tower_face_c
     *
     * @return string|null
     */
    public function getTowerFaceC()
    {
        return $this->container['tower_face_c'];
    }

    /**
     * Sets tower_face_c
     *
     * @param string|null $tower_face_c tower_face_c
     *
     * @return $this
     */
    public function setTowerFaceC($tower_face_c)
    {
        $this->container['tower_face_c'] = $tower_face_c;

        return $this;
    }

    /**
     * Gets tower_end_strength
     *
     * @return int|null
     */
    public function getTowerEndStrength()
    {
        return $this->container['tower_end_strength'];
    }

    /**
     * Sets tower_end_strength
     *
     * @param int|null $tower_end_strength tower_end_strength
     *
     * @return $this
     */
    public function setTowerEndStrength($tower_end_strength)
    {
        $this->container['tower_end_strength'] = $tower_end_strength;

        return $this;
    }

    /**
     * Gets tech_foul_count
     *
     * @return int|null
     */
    public function getTechFoulCount()
    {
        return $this->container['tech_foul_count'];
    }

    /**
     * Sets tech_foul_count
     *
     * @param int|null $tech_foul_count tech_foul_count
     *
     * @return $this
     */
    public function setTechFoulCount($tech_foul_count)
    {
        $this->container['tech_foul_count'] = $tech_foul_count;

        return $this;
    }

    /**
     * Gets foul_count
     *
     * @return int|null
     */
    public function getFoulCount()
    {
        return $this->container['foul_count'];
    }

    /**
     * Sets foul_count
     *
     * @param int|null $foul_count foul_count
     *
     * @return $this
     */
    public function setFoulCount($foul_count)
    {
        $this->container['foul_count'] = $foul_count;

        return $this;
    }

    /**
     * Gets position2
     *
     * @return string|null
     */
    public function getPosition2()
    {
        return $this->container['position2'];
    }

    /**
     * Sets position2
     *
     * @param string|null $position2 position2
     *
     * @return $this
     */
    public function setPosition2($position2)
    {
        $this->container['position2'] = $position2;

        return $this;
    }

    /**
     * Gets position3
     *
     * @return string|null
     */
    public function getPosition3()
    {
        return $this->container['position3'];
    }

    /**
     * Sets position3
     *
     * @param string|null $position3 position3
     *
     * @return $this
     */
    public function setPosition3($position3)
    {
        $this->container['position3'] = $position3;

        return $this;
    }

    /**
     * Gets position4
     *
     * @return string|null
     */
    public function getPosition4()
    {
        return $this->container['position4'];
    }

    /**
     * Sets position4
     *
     * @param string|null $position4 position4
     *
     * @return $this
     */
    public function setPosition4($position4)
    {
        $this->container['position4'] = $position4;

        return $this;
    }

    /**
     * Gets position5
     *
     * @return string|null
     */
    public function getPosition5()
    {
        return $this->container['position5'];
    }

    /**
     * Sets position5
     *
     * @param string|null $position5 position5
     *
     * @return $this
     */
    public function setPosition5($position5)
    {
        $this->container['position5'] = $position5;

        return $this;
    }

    /**
     * Gets position1crossings
     *
     * @return int|null
     */
    public function getPosition1crossings()
    {
        return $this->container['position1crossings'];
    }

    /**
     * Sets position1crossings
     *
     * @param int|null $position1crossings position1crossings
     *
     * @return $this
     */
    public function setPosition1crossings($position1crossings)
    {
        $this->container['position1crossings'] = $position1crossings;

        return $this;
    }

    /**
     * Gets position2crossings
     *
     * @return int|null
     */
    public function getPosition2crossings()
    {
        return $this->container['position2crossings'];
    }

    /**
     * Sets position2crossings
     *
     * @param int|null $position2crossings position2crossings
     *
     * @return $this
     */
    public function setPosition2crossings($position2crossings)
    {
        $this->container['position2crossings'] = $position2crossings;

        return $this;
    }

    /**
     * Gets position3crossings
     *
     * @return int|null
     */
    public function getPosition3crossings()
    {
        return $this->container['position3crossings'];
    }

    /**
     * Sets position3crossings
     *
     * @param int|null $position3crossings position3crossings
     *
     * @return $this
     */
    public function setPosition3crossings($position3crossings)
    {
        $this->container['position3crossings'] = $position3crossings;

        return $this;
    }

    /**
     * Gets position4crossings
     *
     * @return int|null
     */
    public function getPosition4crossings()
    {
        return $this->container['position4crossings'];
    }

    /**
     * Sets position4crossings
     *
     * @param int|null $position4crossings position4crossings
     *
     * @return $this
     */
    public function setPosition4crossings($position4crossings)
    {
        $this->container['position4crossings'] = $position4crossings;

        return $this;
    }

    /**
     * Gets position5crossings
     *
     * @return int|null
     */
    public function getPosition5crossings()
    {
        return $this->container['position5crossings'];
    }

    /**
     * Sets position5crossings
     *
     * @param int|null $position5crossings position5crossings
     *
     * @return $this
     */
    public function setPosition5crossings($position5crossings)
    {
        $this->container['position5crossings'] = $position5crossings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


