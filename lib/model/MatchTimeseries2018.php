<?php
/**
 * MatchTimeseries2018
 *
 * PHP version 5
 *
 * @category Class
 * @package  TBA-API\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TBA-API\v3client\TBA-API\v3client\model;

use \ArrayAccess;
use \TBA-API\v3client\ObjectSerializer;

/**
 * MatchTimeseries2018 Class Doc Comment
 *
 * @category Class
 * @description Timeseries data for the 2018 game *FIRST* POWER UP. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This model is currently under active development and may change at any time, including in breaking ways.
 * @package  TBA-API\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MatchTimeseries2018 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Match_Timeseries_2018';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'event_key' => 'string',
        'match_id' => 'string',
        'mode' => 'string',
        'play' => 'int',
        'time_remaining' => 'int',
        'blue_auto_quest' => 'int',
        'blue_boost_count' => 'int',
        'blue_boost_played' => 'int',
        'blue_current_powerup' => 'string',
        'blue_face_the_boss' => 'int',
        'blue_force_count' => 'int',
        'blue_force_played' => 'int',
        'blue_levitate_count' => 'int',
        'blue_levitate_played' => 'int',
        'blue_powerup_time_remaining' => 'string',
        'blue_scale_owned' => 'int',
        'blue_score' => 'int',
        'blue_switch_owned' => 'int',
        'red_auto_quest' => 'int',
        'red_boost_count' => 'int',
        'red_boost_played' => 'int',
        'red_current_powerup' => 'string',
        'red_face_the_boss' => 'int',
        'red_force_count' => 'int',
        'red_force_played' => 'int',
        'red_levitate_count' => 'int',
        'red_levitate_played' => 'int',
        'red_powerup_time_remaining' => 'string',
        'red_scale_owned' => 'int',
        'red_score' => 'int',
        'red_switch_owned' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'event_key' => null,
        'match_id' => null,
        'mode' => null,
        'play' => null,
        'time_remaining' => null,
        'blue_auto_quest' => null,
        'blue_boost_count' => null,
        'blue_boost_played' => null,
        'blue_current_powerup' => null,
        'blue_face_the_boss' => null,
        'blue_force_count' => null,
        'blue_force_played' => null,
        'blue_levitate_count' => null,
        'blue_levitate_played' => null,
        'blue_powerup_time_remaining' => null,
        'blue_scale_owned' => null,
        'blue_score' => null,
        'blue_switch_owned' => null,
        'red_auto_quest' => null,
        'red_boost_count' => null,
        'red_boost_played' => null,
        'red_current_powerup' => null,
        'red_face_the_boss' => null,
        'red_force_count' => null,
        'red_force_played' => null,
        'red_levitate_count' => null,
        'red_levitate_played' => null,
        'red_powerup_time_remaining' => null,
        'red_scale_owned' => null,
        'red_score' => null,
        'red_switch_owned' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_key' => 'event_key',
        'match_id' => 'match_id',
        'mode' => 'mode',
        'play' => 'play',
        'time_remaining' => 'time_remaining',
        'blue_auto_quest' => 'blue_auto_quest',
        'blue_boost_count' => 'blue_boost_count',
        'blue_boost_played' => 'blue_boost_played',
        'blue_current_powerup' => 'blue_current_powerup',
        'blue_face_the_boss' => 'blue_face_the_boss',
        'blue_force_count' => 'blue_force_count',
        'blue_force_played' => 'blue_force_played',
        'blue_levitate_count' => 'blue_levitate_count',
        'blue_levitate_played' => 'blue_levitate_played',
        'blue_powerup_time_remaining' => 'blue_powerup_time_remaining',
        'blue_scale_owned' => 'blue_scale_owned',
        'blue_score' => 'blue_score',
        'blue_switch_owned' => 'blue_switch_owned',
        'red_auto_quest' => 'red_auto_quest',
        'red_boost_count' => 'red_boost_count',
        'red_boost_played' => 'red_boost_played',
        'red_current_powerup' => 'red_current_powerup',
        'red_face_the_boss' => 'red_face_the_boss',
        'red_force_count' => 'red_force_count',
        'red_force_played' => 'red_force_played',
        'red_levitate_count' => 'red_levitate_count',
        'red_levitate_played' => 'red_levitate_played',
        'red_powerup_time_remaining' => 'red_powerup_time_remaining',
        'red_scale_owned' => 'red_scale_owned',
        'red_score' => 'red_score',
        'red_switch_owned' => 'red_switch_owned'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_key' => 'setEventKey',
        'match_id' => 'setMatchId',
        'mode' => 'setMode',
        'play' => 'setPlay',
        'time_remaining' => 'setTimeRemaining',
        'blue_auto_quest' => 'setBlueAutoQuest',
        'blue_boost_count' => 'setBlueBoostCount',
        'blue_boost_played' => 'setBlueBoostPlayed',
        'blue_current_powerup' => 'setBlueCurrentPowerup',
        'blue_face_the_boss' => 'setBlueFaceTheBoss',
        'blue_force_count' => 'setBlueForceCount',
        'blue_force_played' => 'setBlueForcePlayed',
        'blue_levitate_count' => 'setBlueLevitateCount',
        'blue_levitate_played' => 'setBlueLevitatePlayed',
        'blue_powerup_time_remaining' => 'setBluePowerupTimeRemaining',
        'blue_scale_owned' => 'setBlueScaleOwned',
        'blue_score' => 'setBlueScore',
        'blue_switch_owned' => 'setBlueSwitchOwned',
        'red_auto_quest' => 'setRedAutoQuest',
        'red_boost_count' => 'setRedBoostCount',
        'red_boost_played' => 'setRedBoostPlayed',
        'red_current_powerup' => 'setRedCurrentPowerup',
        'red_face_the_boss' => 'setRedFaceTheBoss',
        'red_force_count' => 'setRedForceCount',
        'red_force_played' => 'setRedForcePlayed',
        'red_levitate_count' => 'setRedLevitateCount',
        'red_levitate_played' => 'setRedLevitatePlayed',
        'red_powerup_time_remaining' => 'setRedPowerupTimeRemaining',
        'red_scale_owned' => 'setRedScaleOwned',
        'red_score' => 'setRedScore',
        'red_switch_owned' => 'setRedSwitchOwned'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_key' => 'getEventKey',
        'match_id' => 'getMatchId',
        'mode' => 'getMode',
        'play' => 'getPlay',
        'time_remaining' => 'getTimeRemaining',
        'blue_auto_quest' => 'getBlueAutoQuest',
        'blue_boost_count' => 'getBlueBoostCount',
        'blue_boost_played' => 'getBlueBoostPlayed',
        'blue_current_powerup' => 'getBlueCurrentPowerup',
        'blue_face_the_boss' => 'getBlueFaceTheBoss',
        'blue_force_count' => 'getBlueForceCount',
        'blue_force_played' => 'getBlueForcePlayed',
        'blue_levitate_count' => 'getBlueLevitateCount',
        'blue_levitate_played' => 'getBlueLevitatePlayed',
        'blue_powerup_time_remaining' => 'getBluePowerupTimeRemaining',
        'blue_scale_owned' => 'getBlueScaleOwned',
        'blue_score' => 'getBlueScore',
        'blue_switch_owned' => 'getBlueSwitchOwned',
        'red_auto_quest' => 'getRedAutoQuest',
        'red_boost_count' => 'getRedBoostCount',
        'red_boost_played' => 'getRedBoostPlayed',
        'red_current_powerup' => 'getRedCurrentPowerup',
        'red_face_the_boss' => 'getRedFaceTheBoss',
        'red_force_count' => 'getRedForceCount',
        'red_force_played' => 'getRedForcePlayed',
        'red_levitate_count' => 'getRedLevitateCount',
        'red_levitate_played' => 'getRedLevitatePlayed',
        'red_powerup_time_remaining' => 'getRedPowerupTimeRemaining',
        'red_scale_owned' => 'getRedScaleOwned',
        'red_score' => 'getRedScore',
        'red_switch_owned' => 'getRedSwitchOwned'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event_key'] = isset($data['event_key']) ? $data['event_key'] : null;
        $this->container['match_id'] = isset($data['match_id']) ? $data['match_id'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['play'] = isset($data['play']) ? $data['play'] : null;
        $this->container['time_remaining'] = isset($data['time_remaining']) ? $data['time_remaining'] : null;
        $this->container['blue_auto_quest'] = isset($data['blue_auto_quest']) ? $data['blue_auto_quest'] : null;
        $this->container['blue_boost_count'] = isset($data['blue_boost_count']) ? $data['blue_boost_count'] : null;
        $this->container['blue_boost_played'] = isset($data['blue_boost_played']) ? $data['blue_boost_played'] : null;
        $this->container['blue_current_powerup'] = isset($data['blue_current_powerup']) ? $data['blue_current_powerup'] : null;
        $this->container['blue_face_the_boss'] = isset($data['blue_face_the_boss']) ? $data['blue_face_the_boss'] : null;
        $this->container['blue_force_count'] = isset($data['blue_force_count']) ? $data['blue_force_count'] : null;
        $this->container['blue_force_played'] = isset($data['blue_force_played']) ? $data['blue_force_played'] : null;
        $this->container['blue_levitate_count'] = isset($data['blue_levitate_count']) ? $data['blue_levitate_count'] : null;
        $this->container['blue_levitate_played'] = isset($data['blue_levitate_played']) ? $data['blue_levitate_played'] : null;
        $this->container['blue_powerup_time_remaining'] = isset($data['blue_powerup_time_remaining']) ? $data['blue_powerup_time_remaining'] : null;
        $this->container['blue_scale_owned'] = isset($data['blue_scale_owned']) ? $data['blue_scale_owned'] : null;
        $this->container['blue_score'] = isset($data['blue_score']) ? $data['blue_score'] : null;
        $this->container['blue_switch_owned'] = isset($data['blue_switch_owned']) ? $data['blue_switch_owned'] : null;
        $this->container['red_auto_quest'] = isset($data['red_auto_quest']) ? $data['red_auto_quest'] : null;
        $this->container['red_boost_count'] = isset($data['red_boost_count']) ? $data['red_boost_count'] : null;
        $this->container['red_boost_played'] = isset($data['red_boost_played']) ? $data['red_boost_played'] : null;
        $this->container['red_current_powerup'] = isset($data['red_current_powerup']) ? $data['red_current_powerup'] : null;
        $this->container['red_face_the_boss'] = isset($data['red_face_the_boss']) ? $data['red_face_the_boss'] : null;
        $this->container['red_force_count'] = isset($data['red_force_count']) ? $data['red_force_count'] : null;
        $this->container['red_force_played'] = isset($data['red_force_played']) ? $data['red_force_played'] : null;
        $this->container['red_levitate_count'] = isset($data['red_levitate_count']) ? $data['red_levitate_count'] : null;
        $this->container['red_levitate_played'] = isset($data['red_levitate_played']) ? $data['red_levitate_played'] : null;
        $this->container['red_powerup_time_remaining'] = isset($data['red_powerup_time_remaining']) ? $data['red_powerup_time_remaining'] : null;
        $this->container['red_scale_owned'] = isset($data['red_scale_owned']) ? $data['red_scale_owned'] : null;
        $this->container['red_score'] = isset($data['red_score']) ? $data['red_score'] : null;
        $this->container['red_switch_owned'] = isset($data['red_switch_owned']) ? $data['red_switch_owned'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_key
     *
     * @return string|null
     */
    public function getEventKey()
    {
        return $this->container['event_key'];
    }

    /**
     * Sets event_key
     *
     * @param string|null $event_key TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
     *
     * @return $this
     */
    public function setEventKey($event_key)
    {
        $this->container['event_key'] = $event_key;

        return $this;
    }

    /**
     * Gets match_id
     *
     * @return string|null
     */
    public function getMatchId()
    {
        return $this->container['match_id'];
    }

    /**
     * Sets match_id
     *
     * @param string|null $match_id Match ID consisting of the level, match number, and set number, eg `qm45` or `f1m1`.
     *
     * @return $this
     */
    public function setMatchId($match_id)
    {
        $this->container['match_id'] = $match_id;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Current mode of play, can be `pre_match`, `auto`, `telop`, or `post_match`.
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets play
     *
     * @return int|null
     */
    public function getPlay()
    {
        return $this->container['play'];
    }

    /**
     * Sets play
     *
     * @param int|null $play play
     *
     * @return $this
     */
    public function setPlay($play)
    {
        $this->container['play'] = $play;

        return $this;
    }

    /**
     * Gets time_remaining
     *
     * @return int|null
     */
    public function getTimeRemaining()
    {
        return $this->container['time_remaining'];
    }

    /**
     * Sets time_remaining
     *
     * @param int|null $time_remaining Amount of time remaining in the match, only valid during `auto` and `teleop` modes.
     *
     * @return $this
     */
    public function setTimeRemaining($time_remaining)
    {
        $this->container['time_remaining'] = $time_remaining;

        return $this;
    }

    /**
     * Gets blue_auto_quest
     *
     * @return int|null
     */
    public function getBlueAutoQuest()
    {
        return $this->container['blue_auto_quest'];
    }

    /**
     * Sets blue_auto_quest
     *
     * @param int|null $blue_auto_quest 1 if the blue alliance is credited with the AUTO QUEST, 0 if not.
     *
     * @return $this
     */
    public function setBlueAutoQuest($blue_auto_quest)
    {
        $this->container['blue_auto_quest'] = $blue_auto_quest;

        return $this;
    }

    /**
     * Gets blue_boost_count
     *
     * @return int|null
     */
    public function getBlueBoostCount()
    {
        return $this->container['blue_boost_count'];
    }

    /**
     * Sets blue_boost_count
     *
     * @param int|null $blue_boost_count Number of POWER CUBES in the BOOST section of the blue alliance VAULT.
     *
     * @return $this
     */
    public function setBlueBoostCount($blue_boost_count)
    {
        $this->container['blue_boost_count'] = $blue_boost_count;

        return $this;
    }

    /**
     * Gets blue_boost_played
     *
     * @return int|null
     */
    public function getBlueBoostPlayed()
    {
        return $this->container['blue_boost_played'];
    }

    /**
     * Sets blue_boost_played
     *
     * @param int|null $blue_boost_played Returns 1 if the blue alliance BOOST was played, or 0 if not played.
     *
     * @return $this
     */
    public function setBlueBoostPlayed($blue_boost_played)
    {
        $this->container['blue_boost_played'] = $blue_boost_played;

        return $this;
    }

    /**
     * Gets blue_current_powerup
     *
     * @return string|null
     */
    public function getBlueCurrentPowerup()
    {
        return $this->container['blue_current_powerup'];
    }

    /**
     * Sets blue_current_powerup
     *
     * @param string|null $blue_current_powerup Name of the current blue alliance POWER UP being played, or `null`.
     *
     * @return $this
     */
    public function setBlueCurrentPowerup($blue_current_powerup)
    {
        $this->container['blue_current_powerup'] = $blue_current_powerup;

        return $this;
    }

    /**
     * Gets blue_face_the_boss
     *
     * @return int|null
     */
    public function getBlueFaceTheBoss()
    {
        return $this->container['blue_face_the_boss'];
    }

    /**
     * Sets blue_face_the_boss
     *
     * @param int|null $blue_face_the_boss 1 if the blue alliance is credited with FACING THE BOSS, 0 if not.
     *
     * @return $this
     */
    public function setBlueFaceTheBoss($blue_face_the_boss)
    {
        $this->container['blue_face_the_boss'] = $blue_face_the_boss;

        return $this;
    }

    /**
     * Gets blue_force_count
     *
     * @return int|null
     */
    public function getBlueForceCount()
    {
        return $this->container['blue_force_count'];
    }

    /**
     * Sets blue_force_count
     *
     * @param int|null $blue_force_count Number of POWER CUBES in the FORCE section of the blue alliance VAULT.
     *
     * @return $this
     */
    public function setBlueForceCount($blue_force_count)
    {
        $this->container['blue_force_count'] = $blue_force_count;

        return $this;
    }

    /**
     * Gets blue_force_played
     *
     * @return int|null
     */
    public function getBlueForcePlayed()
    {
        return $this->container['blue_force_played'];
    }

    /**
     * Sets blue_force_played
     *
     * @param int|null $blue_force_played Returns 1 if the blue alliance FORCE was played, or 0 if not played.
     *
     * @return $this
     */
    public function setBlueForcePlayed($blue_force_played)
    {
        $this->container['blue_force_played'] = $blue_force_played;

        return $this;
    }

    /**
     * Gets blue_levitate_count
     *
     * @return int|null
     */
    public function getBlueLevitateCount()
    {
        return $this->container['blue_levitate_count'];
    }

    /**
     * Sets blue_levitate_count
     *
     * @param int|null $blue_levitate_count Number of POWER CUBES in the LEVITATE section of the blue alliance VAULT.
     *
     * @return $this
     */
    public function setBlueLevitateCount($blue_levitate_count)
    {
        $this->container['blue_levitate_count'] = $blue_levitate_count;

        return $this;
    }

    /**
     * Gets blue_levitate_played
     *
     * @return int|null
     */
    public function getBlueLevitatePlayed()
    {
        return $this->container['blue_levitate_played'];
    }

    /**
     * Sets blue_levitate_played
     *
     * @param int|null $blue_levitate_played Returns 1 if the blue alliance LEVITATE was played, or 0 if not played.
     *
     * @return $this
     */
    public function setBlueLevitatePlayed($blue_levitate_played)
    {
        $this->container['blue_levitate_played'] = $blue_levitate_played;

        return $this;
    }

    /**
     * Gets blue_powerup_time_remaining
     *
     * @return string|null
     */
    public function getBluePowerupTimeRemaining()
    {
        return $this->container['blue_powerup_time_remaining'];
    }

    /**
     * Sets blue_powerup_time_remaining
     *
     * @param string|null $blue_powerup_time_remaining Number of seconds remaining in the blue alliance POWER UP time, or 0 if none is active.
     *
     * @return $this
     */
    public function setBluePowerupTimeRemaining($blue_powerup_time_remaining)
    {
        $this->container['blue_powerup_time_remaining'] = $blue_powerup_time_remaining;

        return $this;
    }

    /**
     * Gets blue_scale_owned
     *
     * @return int|null
     */
    public function getBlueScaleOwned()
    {
        return $this->container['blue_scale_owned'];
    }

    /**
     * Sets blue_scale_owned
     *
     * @param int|null $blue_scale_owned 1 if the blue alliance owns the SCALE, 0 if not.
     *
     * @return $this
     */
    public function setBlueScaleOwned($blue_scale_owned)
    {
        $this->container['blue_scale_owned'] = $blue_scale_owned;

        return $this;
    }

    /**
     * Gets blue_score
     *
     * @return int|null
     */
    public function getBlueScore()
    {
        return $this->container['blue_score'];
    }

    /**
     * Sets blue_score
     *
     * @param int|null $blue_score Current score for the blue alliance.
     *
     * @return $this
     */
    public function setBlueScore($blue_score)
    {
        $this->container['blue_score'] = $blue_score;

        return $this;
    }

    /**
     * Gets blue_switch_owned
     *
     * @return int|null
     */
    public function getBlueSwitchOwned()
    {
        return $this->container['blue_switch_owned'];
    }

    /**
     * Sets blue_switch_owned
     *
     * @param int|null $blue_switch_owned 1 if the blue alliance owns their SWITCH, 0 if not.
     *
     * @return $this
     */
    public function setBlueSwitchOwned($blue_switch_owned)
    {
        $this->container['blue_switch_owned'] = $blue_switch_owned;

        return $this;
    }

    /**
     * Gets red_auto_quest
     *
     * @return int|null
     */
    public function getRedAutoQuest()
    {
        return $this->container['red_auto_quest'];
    }

    /**
     * Sets red_auto_quest
     *
     * @param int|null $red_auto_quest 1 if the red alliance is credited with the AUTO QUEST, 0 if not.
     *
     * @return $this
     */
    public function setRedAutoQuest($red_auto_quest)
    {
        $this->container['red_auto_quest'] = $red_auto_quest;

        return $this;
    }

    /**
     * Gets red_boost_count
     *
     * @return int|null
     */
    public function getRedBoostCount()
    {
        return $this->container['red_boost_count'];
    }

    /**
     * Sets red_boost_count
     *
     * @param int|null $red_boost_count Number of POWER CUBES in the BOOST section of the red alliance VAULT.
     *
     * @return $this
     */
    public function setRedBoostCount($red_boost_count)
    {
        $this->container['red_boost_count'] = $red_boost_count;

        return $this;
    }

    /**
     * Gets red_boost_played
     *
     * @return int|null
     */
    public function getRedBoostPlayed()
    {
        return $this->container['red_boost_played'];
    }

    /**
     * Sets red_boost_played
     *
     * @param int|null $red_boost_played Returns 1 if the red alliance BOOST was played, or 0 if not played.
     *
     * @return $this
     */
    public function setRedBoostPlayed($red_boost_played)
    {
        $this->container['red_boost_played'] = $red_boost_played;

        return $this;
    }

    /**
     * Gets red_current_powerup
     *
     * @return string|null
     */
    public function getRedCurrentPowerup()
    {
        return $this->container['red_current_powerup'];
    }

    /**
     * Sets red_current_powerup
     *
     * @param string|null $red_current_powerup Name of the current red alliance POWER UP being played, or `null`.
     *
     * @return $this
     */
    public function setRedCurrentPowerup($red_current_powerup)
    {
        $this->container['red_current_powerup'] = $red_current_powerup;

        return $this;
    }

    /**
     * Gets red_face_the_boss
     *
     * @return int|null
     */
    public function getRedFaceTheBoss()
    {
        return $this->container['red_face_the_boss'];
    }

    /**
     * Sets red_face_the_boss
     *
     * @param int|null $red_face_the_boss 1 if the red alliance is credited with FACING THE BOSS, 0 if not.
     *
     * @return $this
     */
    public function setRedFaceTheBoss($red_face_the_boss)
    {
        $this->container['red_face_the_boss'] = $red_face_the_boss;

        return $this;
    }

    /**
     * Gets red_force_count
     *
     * @return int|null
     */
    public function getRedForceCount()
    {
        return $this->container['red_force_count'];
    }

    /**
     * Sets red_force_count
     *
     * @param int|null $red_force_count Number of POWER CUBES in the FORCE section of the red alliance VAULT.
     *
     * @return $this
     */
    public function setRedForceCount($red_force_count)
    {
        $this->container['red_force_count'] = $red_force_count;

        return $this;
    }

    /**
     * Gets red_force_played
     *
     * @return int|null
     */
    public function getRedForcePlayed()
    {
        return $this->container['red_force_played'];
    }

    /**
     * Sets red_force_played
     *
     * @param int|null $red_force_played Returns 1 if the red alliance FORCE was played, or 0 if not played.
     *
     * @return $this
     */
    public function setRedForcePlayed($red_force_played)
    {
        $this->container['red_force_played'] = $red_force_played;

        return $this;
    }

    /**
     * Gets red_levitate_count
     *
     * @return int|null
     */
    public function getRedLevitateCount()
    {
        return $this->container['red_levitate_count'];
    }

    /**
     * Sets red_levitate_count
     *
     * @param int|null $red_levitate_count Number of POWER CUBES in the LEVITATE section of the red alliance VAULT.
     *
     * @return $this
     */
    public function setRedLevitateCount($red_levitate_count)
    {
        $this->container['red_levitate_count'] = $red_levitate_count;

        return $this;
    }

    /**
     * Gets red_levitate_played
     *
     * @return int|null
     */
    public function getRedLevitatePlayed()
    {
        return $this->container['red_levitate_played'];
    }

    /**
     * Sets red_levitate_played
     *
     * @param int|null $red_levitate_played Returns 1 if the red alliance LEVITATE was played, or 0 if not played.
     *
     * @return $this
     */
    public function setRedLevitatePlayed($red_levitate_played)
    {
        $this->container['red_levitate_played'] = $red_levitate_played;

        return $this;
    }

    /**
     * Gets red_powerup_time_remaining
     *
     * @return string|null
     */
    public function getRedPowerupTimeRemaining()
    {
        return $this->container['red_powerup_time_remaining'];
    }

    /**
     * Sets red_powerup_time_remaining
     *
     * @param string|null $red_powerup_time_remaining Number of seconds remaining in the red alliance POWER UP time, or 0 if none is active.
     *
     * @return $this
     */
    public function setRedPowerupTimeRemaining($red_powerup_time_remaining)
    {
        $this->container['red_powerup_time_remaining'] = $red_powerup_time_remaining;

        return $this;
    }

    /**
     * Gets red_scale_owned
     *
     * @return int|null
     */
    public function getRedScaleOwned()
    {
        return $this->container['red_scale_owned'];
    }

    /**
     * Sets red_scale_owned
     *
     * @param int|null $red_scale_owned 1 if the red alliance owns the SCALE, 0 if not.
     *
     * @return $this
     */
    public function setRedScaleOwned($red_scale_owned)
    {
        $this->container['red_scale_owned'] = $red_scale_owned;

        return $this;
    }

    /**
     * Gets red_score
     *
     * @return int|null
     */
    public function getRedScore()
    {
        return $this->container['red_score'];
    }

    /**
     * Sets red_score
     *
     * @param int|null $red_score Current score for the red alliance.
     *
     * @return $this
     */
    public function setRedScore($red_score)
    {
        $this->container['red_score'] = $red_score;

        return $this;
    }

    /**
     * Gets red_switch_owned
     *
     * @return int|null
     */
    public function getRedSwitchOwned()
    {
        return $this->container['red_switch_owned'];
    }

    /**
     * Sets red_switch_owned
     *
     * @param int|null $red_switch_owned 1 if the red alliance owns their SWITCH, 0 if not.
     *
     * @return $this
     */
    public function setRedSwitchOwned($red_switch_owned)
    {
        $this->container['red_switch_owned'] = $red_switch_owned;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


