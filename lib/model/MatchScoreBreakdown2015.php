<?php
/**
 * MatchScoreBreakdown2015
 *
 * PHP version 5
 *
 * @category Class
 * @package  TBA-API\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TBA-API\v3client\TBA-API\v3client\model;

use \ArrayAccess;
use \TBA-API\v3client\ObjectSerializer;

/**
 * MatchScoreBreakdown2015 Class Doc Comment
 *
 * @category Class
 * @description See the 2015 FMS API documentation for a description of each value
 * @package  TBA-API\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MatchScoreBreakdown2015 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Match_Score_Breakdown_2015';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'blue' => '\TBA-API\v3client\TBA-API\v3client\model\MatchScoreBreakdown2015Alliance',
        'red' => '\TBA-API\v3client\TBA-API\v3client\model\MatchScoreBreakdown2015Alliance',
        'coopertition' => 'string',
        'coopertition_points' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'blue' => null,
        'red' => null,
        'coopertition' => null,
        'coopertition_points' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'blue' => 'blue',
        'red' => 'red',
        'coopertition' => 'coopertition',
        'coopertition_points' => 'coopertition_points'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'blue' => 'setBlue',
        'red' => 'setRed',
        'coopertition' => 'setCoopertition',
        'coopertition_points' => 'setCoopertitionPoints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'blue' => 'getBlue',
        'red' => 'getRed',
        'coopertition' => 'getCoopertition',
        'coopertition_points' => 'getCoopertitionPoints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const COOPERTITION_NONE = 'None';
    const COOPERTITION_UNKNOWN = 'Unknown';
    const COOPERTITION_STACK = 'Stack';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCoopertitionAllowableValues()
    {
        return [
            self::COOPERTITION_NONE,
            self::COOPERTITION_UNKNOWN,
            self::COOPERTITION_STACK,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['blue'] = isset($data['blue']) ? $data['blue'] : null;
        $this->container['red'] = isset($data['red']) ? $data['red'] : null;
        $this->container['coopertition'] = isset($data['coopertition']) ? $data['coopertition'] : null;
        $this->container['coopertition_points'] = isset($data['coopertition_points']) ? $data['coopertition_points'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCoopertitionAllowableValues();
        if (!is_null($this->container['coopertition']) && !in_array($this->container['coopertition'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'coopertition', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets blue
     *
     * @return \TBA-API\v3client\TBA-API\v3client\model\MatchScoreBreakdown2015Alliance|null
     */
    public function getBlue()
    {
        return $this->container['blue'];
    }

    /**
     * Sets blue
     *
     * @param \TBA-API\v3client\TBA-API\v3client\model\MatchScoreBreakdown2015Alliance|null $blue blue
     *
     * @return $this
     */
    public function setBlue($blue)
    {
        $this->container['blue'] = $blue;

        return $this;
    }

    /**
     * Gets red
     *
     * @return \TBA-API\v3client\TBA-API\v3client\model\MatchScoreBreakdown2015Alliance|null
     */
    public function getRed()
    {
        return $this->container['red'];
    }

    /**
     * Sets red
     *
     * @param \TBA-API\v3client\TBA-API\v3client\model\MatchScoreBreakdown2015Alliance|null $red red
     *
     * @return $this
     */
    public function setRed($red)
    {
        $this->container['red'] = $red;

        return $this;
    }

    /**
     * Gets coopertition
     *
     * @return string|null
     */
    public function getCoopertition()
    {
        return $this->container['coopertition'];
    }

    /**
     * Sets coopertition
     *
     * @param string|null $coopertition coopertition
     *
     * @return $this
     */
    public function setCoopertition($coopertition)
    {
        $allowedValues = $this->getCoopertitionAllowableValues();
        if (!is_null($coopertition) && !in_array($coopertition, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'coopertition', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['coopertition'] = $coopertition;

        return $this;
    }

    /**
     * Gets coopertition_points
     *
     * @return int|null
     */
    public function getCoopertitionPoints()
    {
        return $this->container['coopertition_points'];
    }

    /**
     * Sets coopertition_points
     *
     * @param int|null $coopertition_points coopertition_points
     *
     * @return $this
     */
    public function setCoopertitionPoints($coopertition_points)
    {
        $this->container['coopertition_points'] = $coopertition_points;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


