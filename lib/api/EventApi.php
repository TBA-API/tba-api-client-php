<?php
/**
 * EventApi
 * PHP version 5
 *
 * @category Class
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TBAAPI\v3client\TBAAPI\v3client\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TBAAPI\v3client\ApiException;
use TBAAPI\v3client\Configuration;
use TBAAPI\v3client\HeaderSelector;
use TBAAPI\v3client\ObjectSerializer;

/**
 * EventApi Class Doc Comment
 *
 * @category Class
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EventApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getDistrictEvents
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Event[]
     */
    public function getDistrictEvents($district_key, $if_modified_since = null)
    {
        list($response) = $this->getDistrictEventsWithHttpInfo($district_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getDistrictEventsWithHttpInfo
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Event[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDistrictEventsWithHttpInfo($district_key, $if_modified_since = null)
    {
        $request = $this->getDistrictEventsRequest($district_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Event[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDistrictEventsAsync
     *
     * 
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDistrictEventsAsync($district_key, $if_modified_since = null)
    {
        return $this->getDistrictEventsAsyncWithHttpInfo($district_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDistrictEventsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDistrictEventsAsyncWithHttpInfo($district_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]';
        $request = $this->getDistrictEventsRequest($district_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDistrictEvents'
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDistrictEventsRequest($district_key, $if_modified_since = null)
    {
        // verify the required parameter 'district_key' is set
        if ($district_key === null || (is_array($district_key) && count($district_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $district_key when calling getDistrictEvents'
            );
        }

        $resourcePath = '/district/{district_key}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($district_key !== null) {
            $resourcePath = str_replace(
                '{' . 'district_key' . '}',
                ObjectSerializer::toPathValue($district_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDistrictEventsKeys
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getDistrictEventsKeys($district_key, $if_modified_since = null)
    {
        list($response) = $this->getDistrictEventsKeysWithHttpInfo($district_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getDistrictEventsKeysWithHttpInfo
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDistrictEventsKeysWithHttpInfo($district_key, $if_modified_since = null)
    {
        $request = $this->getDistrictEventsKeysRequest($district_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDistrictEventsKeysAsync
     *
     * 
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDistrictEventsKeysAsync($district_key, $if_modified_since = null)
    {
        return $this->getDistrictEventsKeysAsyncWithHttpInfo($district_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDistrictEventsKeysAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDistrictEventsKeysAsyncWithHttpInfo($district_key, $if_modified_since = null)
    {
        $returnType = 'string[]';
        $request = $this->getDistrictEventsKeysRequest($district_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDistrictEventsKeys'
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDistrictEventsKeysRequest($district_key, $if_modified_since = null)
    {
        // verify the required parameter 'district_key' is set
        if ($district_key === null || (is_array($district_key) && count($district_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $district_key when calling getDistrictEventsKeys'
            );
        }

        $resourcePath = '/district/{district_key}/events/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($district_key !== null) {
            $resourcePath = str_replace(
                '{' . 'district_key' . '}',
                ObjectSerializer::toPathValue($district_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDistrictEventsSimple
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]
     */
    public function getDistrictEventsSimple($district_key, $if_modified_since = null)
    {
        list($response) = $this->getDistrictEventsSimpleWithHttpInfo($district_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getDistrictEventsSimpleWithHttpInfo
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDistrictEventsSimpleWithHttpInfo($district_key, $if_modified_since = null)
    {
        $request = $this->getDistrictEventsSimpleRequest($district_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDistrictEventsSimpleAsync
     *
     * 
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDistrictEventsSimpleAsync($district_key, $if_modified_since = null)
    {
        return $this->getDistrictEventsSimpleAsyncWithHttpInfo($district_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDistrictEventsSimpleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDistrictEventsSimpleAsyncWithHttpInfo($district_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]';
        $request = $this->getDistrictEventsSimpleRequest($district_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDistrictEventsSimple'
     *
     * @param  string $district_key TBA District Key, eg &#x60;2016fim&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDistrictEventsSimpleRequest($district_key, $if_modified_since = null)
    {
        // verify the required parameter 'district_key' is set
        if ($district_key === null || (is_array($district_key) && count($district_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $district_key when calling getDistrictEventsSimple'
            );
        }

        $resourcePath = '/district/{district_key}/events/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($district_key !== null) {
            $resourcePath = str_replace(
                '{' . 'district_key' . '}',
                ObjectSerializer::toPathValue($district_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEvent
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Event
     */
    public function getEvent($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Event, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Event' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Event', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Event';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Event',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Event';
        $request = $this->getEventRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEvent'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEvent'
            );
        }

        $resourcePath = '/event/{event_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventAlliances
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\EliminationAlliance[]
     */
    public function getEventAlliances($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventAlliancesWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventAlliancesWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\EliminationAlliance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventAlliancesWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventAlliancesRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\EliminationAlliance[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\EliminationAlliance[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EliminationAlliance[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\EliminationAlliance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventAlliancesAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventAlliancesAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventAlliancesAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventAlliancesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventAlliancesAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EliminationAlliance[]';
        $request = $this->getEventAlliancesRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventAlliances'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventAlliancesRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventAlliances'
            );
        }

        $resourcePath = '/event/{event_key}/alliances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventAwards
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Award[]
     */
    public function getEventAwards($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventAwardsWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventAwardsWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Award[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventAwardsWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventAwardsRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Award[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Award[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Award[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Award[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventAwardsAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventAwardsAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventAwardsAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventAwardsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventAwardsAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Award[]';
        $request = $this->getEventAwardsRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventAwards'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventAwardsRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventAwards'
            );
        }

        $resourcePath = '/event/{event_key}/awards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventDistrictPoints
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\EventDistrictPoints
     */
    public function getEventDistrictPoints($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventDistrictPointsWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventDistrictPointsWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\EventDistrictPoints, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventDistrictPointsWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventDistrictPointsRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\EventDistrictPoints' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\EventDistrictPoints', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventDistrictPoints';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\EventDistrictPoints',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventDistrictPointsAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventDistrictPointsAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventDistrictPointsAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventDistrictPointsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventDistrictPointsAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventDistrictPoints';
        $request = $this->getEventDistrictPointsRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventDistrictPoints'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventDistrictPointsRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventDistrictPoints'
            );
        }

        $resourcePath = '/event/{event_key}/district_points';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventInsights
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\EventInsights
     */
    public function getEventInsights($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventInsightsWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventInsightsWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\EventInsights, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventInsightsWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventInsightsRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\EventInsights' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\EventInsights', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventInsights';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\EventInsights',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventInsightsAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventInsightsAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventInsightsAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventInsightsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventInsightsAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventInsights';
        $request = $this->getEventInsightsRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventInsights'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventInsightsRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventInsights'
            );
        }

        $resourcePath = '/event/{event_key}/insights';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventMatchTimeseries
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getEventMatchTimeseries($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventMatchTimeseriesWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventMatchTimeseriesWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventMatchTimeseriesWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventMatchTimeseriesRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventMatchTimeseriesAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchTimeseriesAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventMatchTimeseriesAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventMatchTimeseriesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchTimeseriesAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = 'string[]';
        $request = $this->getEventMatchTimeseriesRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventMatchTimeseries'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventMatchTimeseriesRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventMatchTimeseries'
            );
        }

        $resourcePath = '/event/{event_key}/matches/timeseries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventMatches
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Match[]
     */
    public function getEventMatches($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventMatchesWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventMatchesWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Match[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventMatchesWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventMatchesRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Match[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventMatchesAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchesAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventMatchesAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventMatchesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchesAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
        $request = $this->getEventMatchesRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventMatches'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventMatchesRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventMatches'
            );
        }

        $resourcePath = '/event/{event_key}/matches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventMatchesKeys
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getEventMatchesKeys($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventMatchesKeysWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventMatchesKeysWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventMatchesKeysWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventMatchesKeysRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventMatchesKeysAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchesKeysAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventMatchesKeysAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventMatchesKeysAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchesKeysAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = 'string[]';
        $request = $this->getEventMatchesKeysRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventMatchesKeys'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventMatchesKeysRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventMatchesKeys'
            );
        }

        $resourcePath = '/event/{event_key}/matches/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventMatchesSimple
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]
     */
    public function getEventMatchesSimple($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventMatchesSimpleWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventMatchesSimpleWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventMatchesSimpleWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventMatchesSimpleRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventMatchesSimpleAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchesSimpleAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventMatchesSimpleAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventMatchesSimpleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchesSimpleAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]';
        $request = $this->getEventMatchesSimpleRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventMatchesSimple'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventMatchesSimpleRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventMatchesSimple'
            );
        }

        $resourcePath = '/event/{event_key}/matches/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventOPRs
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\EventOPRs
     */
    public function getEventOPRs($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventOPRsWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventOPRsWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\EventOPRs, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventOPRsWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventOPRsRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\EventOPRs' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\EventOPRs', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventOPRs';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\EventOPRs',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventOPRsAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventOPRsAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventOPRsAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventOPRsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventOPRsAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventOPRs';
        $request = $this->getEventOPRsRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventOPRs'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventOPRsRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventOPRs'
            );
        }

        $resourcePath = '/event/{event_key}/oprs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventPredictions
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getEventPredictions($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventPredictionsWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventPredictionsWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventPredictionsWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventPredictionsRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventPredictionsAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventPredictionsAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventPredictionsAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventPredictionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventPredictionsAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = 'object';
        $request = $this->getEventPredictionsRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventPredictions'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventPredictionsRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventPredictions'
            );
        }

        $resourcePath = '/event/{event_key}/predictions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventRankings
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\EventRanking
     */
    public function getEventRankings($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventRankingsWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventRankingsWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\EventRanking, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventRankingsWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventRankingsRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\EventRanking' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\EventRanking', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventRanking';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\EventRanking',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventRankingsAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventRankingsAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventRankingsAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventRankingsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventRankingsAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventRanking';
        $request = $this->getEventRankingsRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventRankings'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventRankingsRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventRankings'
            );
        }

        $resourcePath = '/event/{event_key}/rankings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventSimple
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\EventSimple
     */
    public function getEventSimple($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventSimpleWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventSimpleWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\EventSimple, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventSimpleWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventSimpleRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventSimpleAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventSimpleAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventSimpleAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventSimpleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventSimpleAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple';
        $request = $this->getEventSimpleRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventSimple'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventSimpleRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventSimple'
            );
        }

        $resourcePath = '/event/{event_key}/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventTeams
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Team[]
     */
    public function getEventTeams($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventTeamsWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventTeamsWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Team[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventTeamsWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventTeamsRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Team[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Team[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Team[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Team[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventTeamsAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventTeamsAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventTeamsAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventTeamsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventTeamsAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Team[]';
        $request = $this->getEventTeamsRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventTeams'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventTeamsRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventTeams'
            );
        }

        $resourcePath = '/event/{event_key}/teams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventTeamsKeys
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getEventTeamsKeys($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventTeamsKeysWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventTeamsKeysWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventTeamsKeysWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventTeamsKeysRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventTeamsKeysAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventTeamsKeysAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventTeamsKeysAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventTeamsKeysAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventTeamsKeysAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = 'string[]';
        $request = $this->getEventTeamsKeysRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventTeamsKeys'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventTeamsKeysRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventTeamsKeys'
            );
        }

        $resourcePath = '/event/{event_key}/teams/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventTeamsSimple
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\TeamSimple[]
     */
    public function getEventTeamsSimple($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventTeamsSimpleWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventTeamsSimpleWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\TeamSimple[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventTeamsSimpleWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventTeamsSimpleRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\TeamSimple[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\TeamSimple[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\TeamSimple[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\TeamSimple[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventTeamsSimpleAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventTeamsSimpleAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventTeamsSimpleAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventTeamsSimpleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventTeamsSimpleAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\TeamSimple[]';
        $request = $this->getEventTeamsSimpleRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventTeamsSimple'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventTeamsSimpleRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventTeamsSimple'
            );
        }

        $resourcePath = '/event/{event_key}/teams/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventTeamsStatuses
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus]
     */
    public function getEventTeamsStatuses($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventTeamsStatusesWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventTeamsStatusesWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventTeamsStatusesWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventTeamsStatusesRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventTeamsStatusesAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventTeamsStatusesAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventTeamsStatusesAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventTeamsStatusesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventTeamsStatusesAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = 'map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus]';
        $request = $this->getEventTeamsStatusesRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventTeamsStatuses'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventTeamsStatusesRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventTeamsStatuses'
            );
        }

        $resourcePath = '/event/{event_key}/teams/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventsByYear
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Event[]
     */
    public function getEventsByYear($year, $if_modified_since = null)
    {
        list($response) = $this->getEventsByYearWithHttpInfo($year, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventsByYearWithHttpInfo
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Event[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsByYearWithHttpInfo($year, $if_modified_since = null)
    {
        $request = $this->getEventsByYearRequest($year, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Event[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventsByYearAsync
     *
     * 
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsByYearAsync($year, $if_modified_since = null)
    {
        return $this->getEventsByYearAsyncWithHttpInfo($year, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventsByYearAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsByYearAsyncWithHttpInfo($year, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]';
        $request = $this->getEventsByYearRequest($year, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventsByYear'
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventsByYearRequest($year, $if_modified_since = null)
    {
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling getEventsByYear'
            );
        }

        $resourcePath = '/events/{year}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventsByYearKeys
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getEventsByYearKeys($year, $if_modified_since = null)
    {
        list($response) = $this->getEventsByYearKeysWithHttpInfo($year, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventsByYearKeysWithHttpInfo
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsByYearKeysWithHttpInfo($year, $if_modified_since = null)
    {
        $request = $this->getEventsByYearKeysRequest($year, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventsByYearKeysAsync
     *
     * 
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsByYearKeysAsync($year, $if_modified_since = null)
    {
        return $this->getEventsByYearKeysAsyncWithHttpInfo($year, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventsByYearKeysAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsByYearKeysAsyncWithHttpInfo($year, $if_modified_since = null)
    {
        $returnType = 'string[]';
        $request = $this->getEventsByYearKeysRequest($year, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventsByYearKeys'
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventsByYearKeysRequest($year, $if_modified_since = null)
    {
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling getEventsByYearKeys'
            );
        }

        $resourcePath = '/events/{year}/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventsByYearSimple
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]
     */
    public function getEventsByYearSimple($year, $if_modified_since = null)
    {
        list($response) = $this->getEventsByYearSimpleWithHttpInfo($year, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventsByYearSimpleWithHttpInfo
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventsByYearSimpleWithHttpInfo($year, $if_modified_since = null)
    {
        $request = $this->getEventsByYearSimpleRequest($year, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventsByYearSimpleAsync
     *
     * 
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsByYearSimpleAsync($year, $if_modified_since = null)
    {
        return $this->getEventsByYearSimpleAsyncWithHttpInfo($year, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventsByYearSimpleAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventsByYearSimpleAsyncWithHttpInfo($year, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]';
        $request = $this->getEventsByYearSimpleRequest($year, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventsByYearSimple'
     *
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventsByYearSimpleRequest($year, $if_modified_since = null)
    {
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling getEventsByYearSimple'
            );
        }

        $resourcePath = '/events/{year}/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventAwards
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Award[]
     */
    public function getTeamEventAwards($team_key, $event_key, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventAwardsWithHttpInfo($team_key, $event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventAwardsWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Award[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventAwardsWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $request = $this->getTeamEventAwardsRequest($team_key, $event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Award[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Award[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Award[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Award[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventAwardsAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventAwardsAsync($team_key, $event_key, $if_modified_since = null)
    {
        return $this->getTeamEventAwardsAsyncWithHttpInfo($team_key, $event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventAwardsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventAwardsAsyncWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Award[]';
        $request = $this->getTeamEventAwardsRequest($team_key, $event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventAwards'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventAwardsRequest($team_key, $event_key, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventAwards'
            );
        }
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getTeamEventAwards'
            );
        }

        $resourcePath = '/team/{team_key}/event/{event_key}/awards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventMatches
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Match[]
     */
    public function getTeamEventMatches($team_key, $event_key, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventMatchesWithHttpInfo($team_key, $event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventMatchesWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Match[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventMatchesWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $request = $this->getTeamEventMatchesRequest($team_key, $event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Match[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventMatchesAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventMatchesAsync($team_key, $event_key, $if_modified_since = null)
    {
        return $this->getTeamEventMatchesAsyncWithHttpInfo($team_key, $event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventMatchesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventMatchesAsyncWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
        $request = $this->getTeamEventMatchesRequest($team_key, $event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventMatches'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventMatchesRequest($team_key, $event_key, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventMatches'
            );
        }
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getTeamEventMatches'
            );
        }

        $resourcePath = '/team/{team_key}/event/{event_key}/matches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventMatchesKeys
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getTeamEventMatchesKeys($team_key, $event_key, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventMatchesKeysWithHttpInfo($team_key, $event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventMatchesKeysWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventMatchesKeysWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $request = $this->getTeamEventMatchesKeysRequest($team_key, $event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventMatchesKeysAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventMatchesKeysAsync($team_key, $event_key, $if_modified_since = null)
    {
        return $this->getTeamEventMatchesKeysAsyncWithHttpInfo($team_key, $event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventMatchesKeysAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventMatchesKeysAsyncWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $returnType = 'string[]';
        $request = $this->getTeamEventMatchesKeysRequest($team_key, $event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventMatchesKeys'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventMatchesKeysRequest($team_key, $event_key, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventMatchesKeys'
            );
        }
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getTeamEventMatchesKeys'
            );
        }

        $resourcePath = '/team/{team_key}/event/{event_key}/matches/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventMatchesSimple
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Match[]
     */
    public function getTeamEventMatchesSimple($team_key, $event_key, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventMatchesSimpleWithHttpInfo($team_key, $event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventMatchesSimpleWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Match[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventMatchesSimpleWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $request = $this->getTeamEventMatchesSimpleRequest($team_key, $event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Match[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventMatchesSimpleAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventMatchesSimpleAsync($team_key, $event_key, $if_modified_since = null)
    {
        return $this->getTeamEventMatchesSimpleAsyncWithHttpInfo($team_key, $event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventMatchesSimpleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventMatchesSimpleAsyncWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
        $request = $this->getTeamEventMatchesSimpleRequest($team_key, $event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventMatchesSimple'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventMatchesSimpleRequest($team_key, $event_key, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventMatchesSimple'
            );
        }
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getTeamEventMatchesSimple'
            );
        }

        $resourcePath = '/team/{team_key}/event/{event_key}/matches/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventStatus
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus
     */
    public function getTeamEventStatus($team_key, $event_key, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventStatusWithHttpInfo($team_key, $event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventStatusWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventStatusWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $request = $this->getTeamEventStatusRequest($team_key, $event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventStatusAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventStatusAsync($team_key, $event_key, $if_modified_since = null)
    {
        return $this->getTeamEventStatusAsyncWithHttpInfo($team_key, $event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventStatusAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventStatusAsyncWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus';
        $request = $this->getTeamEventStatusRequest($team_key, $event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventStatus'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventStatusRequest($team_key, $event_key, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventStatus'
            );
        }
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getTeamEventStatus'
            );
        }

        $resourcePath = '/team/{team_key}/event/{event_key}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEvents
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Event[]
     */
    public function getTeamEvents($team_key, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventsWithHttpInfo($team_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventsWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Event[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventsWithHttpInfo($team_key, $if_modified_since = null)
    {
        $request = $this->getTeamEventsRequest($team_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Event[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventsAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsAsync($team_key, $if_modified_since = null)
    {
        return $this->getTeamEventsAsyncWithHttpInfo($team_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsAsyncWithHttpInfo($team_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]';
        $request = $this->getTeamEventsRequest($team_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEvents'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventsRequest($team_key, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEvents'
            );
        }

        $resourcePath = '/team/{team_key}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventsByYear
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Event[]
     */
    public function getTeamEventsByYear($team_key, $year, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventsByYearWithHttpInfo($team_key, $year, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventsByYearWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Event[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventsByYearWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $request = $this->getTeamEventsByYearRequest($team_key, $year, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Event[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventsByYearAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsByYearAsync($team_key, $year, $if_modified_since = null)
    {
        return $this->getTeamEventsByYearAsyncWithHttpInfo($team_key, $year, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventsByYearAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsByYearAsyncWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Event[]';
        $request = $this->getTeamEventsByYearRequest($team_key, $year, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventsByYear'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventsByYearRequest($team_key, $year, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventsByYear'
            );
        }
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling getTeamEventsByYear'
            );
        }

        $resourcePath = '/team/{team_key}/events/{year}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventsByYearKeys
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getTeamEventsByYearKeys($team_key, $year, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventsByYearKeysWithHttpInfo($team_key, $year, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventsByYearKeysWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventsByYearKeysWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $request = $this->getTeamEventsByYearKeysRequest($team_key, $year, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventsByYearKeysAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsByYearKeysAsync($team_key, $year, $if_modified_since = null)
    {
        return $this->getTeamEventsByYearKeysAsyncWithHttpInfo($team_key, $year, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventsByYearKeysAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsByYearKeysAsyncWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $returnType = 'string[]';
        $request = $this->getTeamEventsByYearKeysRequest($team_key, $year, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventsByYearKeys'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventsByYearKeysRequest($team_key, $year, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventsByYearKeys'
            );
        }
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling getTeamEventsByYearKeys'
            );
        }

        $resourcePath = '/team/{team_key}/events/{year}/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventsByYearSimple
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]
     */
    public function getTeamEventsByYearSimple($team_key, $year, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventsByYearSimpleWithHttpInfo($team_key, $year, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventsByYearSimpleWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventsByYearSimpleWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $request = $this->getTeamEventsByYearSimpleRequest($team_key, $year, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventsByYearSimpleAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsByYearSimpleAsync($team_key, $year, $if_modified_since = null)
    {
        return $this->getTeamEventsByYearSimpleAsyncWithHttpInfo($team_key, $year, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventsByYearSimpleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsByYearSimpleAsyncWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]';
        $request = $this->getTeamEventsByYearSimpleRequest($team_key, $year, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventsByYearSimple'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventsByYearSimpleRequest($team_key, $year, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventsByYearSimple'
            );
        }
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling getTeamEventsByYearSimple'
            );
        }

        $resourcePath = '/team/{team_key}/events/{year}/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventsKeys
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getTeamEventsKeys($team_key, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventsKeysWithHttpInfo($team_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventsKeysWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventsKeysWithHttpInfo($team_key, $if_modified_since = null)
    {
        $request = $this->getTeamEventsKeysRequest($team_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventsKeysAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsKeysAsync($team_key, $if_modified_since = null)
    {
        return $this->getTeamEventsKeysAsyncWithHttpInfo($team_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventsKeysAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsKeysAsyncWithHttpInfo($team_key, $if_modified_since = null)
    {
        $returnType = 'string[]';
        $request = $this->getTeamEventsKeysRequest($team_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventsKeys'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventsKeysRequest($team_key, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventsKeys'
            );
        }

        $resourcePath = '/team/{team_key}/events/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventsSimple
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]
     */
    public function getTeamEventsSimple($team_key, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventsSimpleWithHttpInfo($team_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventsSimpleWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventsSimpleWithHttpInfo($team_key, $if_modified_since = null)
    {
        $request = $this->getTeamEventsSimpleRequest($team_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventsSimpleAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsSimpleAsync($team_key, $if_modified_since = null)
    {
        return $this->getTeamEventsSimpleAsyncWithHttpInfo($team_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventsSimpleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsSimpleAsyncWithHttpInfo($team_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\EventSimple[]';
        $request = $this->getTeamEventsSimpleRequest($team_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventsSimple'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventsSimpleRequest($team_key, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventsSimple'
            );
        }

        $resourcePath = '/team/{team_key}/events/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventsStatusesByYear
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus]
     */
    public function getTeamEventsStatusesByYear($team_key, $year, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventsStatusesByYearWithHttpInfo($team_key, $year, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventsStatusesByYearWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventsStatusesByYearWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $request = $this->getTeamEventsStatusesByYearRequest($team_key, $year, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventsStatusesByYearAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsStatusesByYearAsync($team_key, $year, $if_modified_since = null)
    {
        return $this->getTeamEventsStatusesByYearAsyncWithHttpInfo($team_key, $year, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventsStatusesByYearAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventsStatusesByYearAsyncWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $returnType = 'map[string,\TBAAPI\v3client\TBAAPI\v3client\model\TeamEventStatus]';
        $request = $this->getTeamEventsStatusesByYearRequest($team_key, $year, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventsStatusesByYear'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventsStatusesByYearRequest($team_key, $year, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventsStatusesByYear'
            );
        }
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling getTeamEventsStatusesByYear'
            );
        }

        $resourcePath = '/team/{team_key}/events/{year}/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
