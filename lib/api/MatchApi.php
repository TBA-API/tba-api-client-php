<?php
/**
 * MatchApi
 * PHP version 5
 *
 * @category Class
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
 *
 * The version of the OpenAPI document: 3.8.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace TBAAPI\v3client\TBAAPI\v3client\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TBAAPI\v3client\ApiException;
use TBAAPI\v3client\Configuration;
use TBAAPI\v3client\HeaderSelector;
use TBAAPI\v3client\ObjectSerializer;

/**
 * MatchApi Class Doc Comment
 *
 * @category Class
 * @package  TBAAPI\v3client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MatchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getEventMatchTimeseries
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getEventMatchTimeseries($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventMatchTimeseriesWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventMatchTimeseriesWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventMatchTimeseriesWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventMatchTimeseriesRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventMatchTimeseriesAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchTimeseriesAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventMatchTimeseriesAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventMatchTimeseriesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchTimeseriesAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = 'string[]';
        $request = $this->getEventMatchTimeseriesRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventMatchTimeseries'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventMatchTimeseriesRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventMatchTimeseries'
            );
        }

        $resourcePath = '/event/{event_key}/matches/timeseries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventMatches
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Match[]
     */
    public function getEventMatches($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventMatchesWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventMatchesWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Match[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventMatchesWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventMatchesRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Match[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventMatchesAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchesAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventMatchesAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventMatchesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchesAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
        $request = $this->getEventMatchesRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventMatches'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventMatchesRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventMatches'
            );
        }

        $resourcePath = '/event/{event_key}/matches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventMatchesKeys
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getEventMatchesKeys($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventMatchesKeysWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventMatchesKeysWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventMatchesKeysWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventMatchesKeysRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventMatchesKeysAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchesKeysAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventMatchesKeysAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventMatchesKeysAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchesKeysAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = 'string[]';
        $request = $this->getEventMatchesKeysRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventMatchesKeys'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventMatchesKeysRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventMatchesKeys'
            );
        }

        $resourcePath = '/event/{event_key}/matches/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventMatchesSimple
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]
     */
    public function getEventMatchesSimple($event_key, $if_modified_since = null)
    {
        list($response) = $this->getEventMatchesSimpleWithHttpInfo($event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getEventMatchesSimpleWithHttpInfo
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventMatchesSimpleWithHttpInfo($event_key, $if_modified_since = null)
    {
        $request = $this->getEventMatchesSimpleRequest($event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventMatchesSimpleAsync
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchesSimpleAsync($event_key, $if_modified_since = null)
    {
        return $this->getEventMatchesSimpleAsyncWithHttpInfo($event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventMatchesSimpleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventMatchesSimpleAsyncWithHttpInfo($event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]';
        $request = $this->getEventMatchesSimpleRequest($event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventMatchesSimple'
     *
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventMatchesSimpleRequest($event_key, $if_modified_since = null)
    {
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getEventMatchesSimple'
            );
        }

        $resourcePath = '/event/{event_key}/matches/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMatch
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Match
     */
    public function getMatch($match_key, $if_modified_since = null)
    {
        list($response) = $this->getMatchWithHttpInfo($match_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getMatchWithHttpInfo
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Match, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMatchWithHttpInfo($match_key, $if_modified_since = null)
    {
        $request = $this->getMatchRequest($match_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Match' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Match', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Match',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMatchAsync
     *
     * 
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchAsync($match_key, $if_modified_since = null)
    {
        return $this->getMatchAsyncWithHttpInfo($match_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMatchAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchAsyncWithHttpInfo($match_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match';
        $request = $this->getMatchRequest($match_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMatch'
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMatchRequest($match_key, $if_modified_since = null)
    {
        // verify the required parameter 'match_key' is set
        if ($match_key === null || (is_array($match_key) && count($match_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $match_key when calling getMatch'
            );
        }

        $resourcePath = '/match/{match_key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($match_key !== null) {
            $resourcePath = str_replace(
                '{' . 'match_key' . '}',
                ObjectSerializer::toPathValue($match_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMatchSimple
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple
     */
    public function getMatchSimple($match_key, $if_modified_since = null)
    {
        list($response) = $this->getMatchSimpleWithHttpInfo($match_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getMatchSimpleWithHttpInfo
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMatchSimpleWithHttpInfo($match_key, $if_modified_since = null)
    {
        $request = $this->getMatchSimpleRequest($match_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMatchSimpleAsync
     *
     * 
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchSimpleAsync($match_key, $if_modified_since = null)
    {
        return $this->getMatchSimpleAsyncWithHttpInfo($match_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMatchSimpleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchSimpleAsyncWithHttpInfo($match_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple';
        $request = $this->getMatchSimpleRequest($match_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMatchSimple'
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMatchSimpleRequest($match_key, $if_modified_since = null)
    {
        // verify the required parameter 'match_key' is set
        if ($match_key === null || (is_array($match_key) && count($match_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $match_key when calling getMatchSimple'
            );
        }

        $resourcePath = '/match/{match_key}/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($match_key !== null) {
            $resourcePath = str_replace(
                '{' . 'match_key' . '}',
                ObjectSerializer::toPathValue($match_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMatchTimeseries
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object[]
     */
    public function getMatchTimeseries($match_key, $if_modified_since = null)
    {
        list($response) = $this->getMatchTimeseriesWithHttpInfo($match_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getMatchTimeseriesWithHttpInfo
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMatchTimeseriesWithHttpInfo($match_key, $if_modified_since = null)
    {
        $request = $this->getMatchTimeseriesRequest($match_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMatchTimeseriesAsync
     *
     * 
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchTimeseriesAsync($match_key, $if_modified_since = null)
    {
        return $this->getMatchTimeseriesAsyncWithHttpInfo($match_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMatchTimeseriesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchTimeseriesAsyncWithHttpInfo($match_key, $if_modified_since = null)
    {
        $returnType = 'object[]';
        $request = $this->getMatchTimeseriesRequest($match_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMatchTimeseries'
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMatchTimeseriesRequest($match_key, $if_modified_since = null)
    {
        // verify the required parameter 'match_key' is set
        if ($match_key === null || (is_array($match_key) && count($match_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $match_key when calling getMatchTimeseries'
            );
        }

        $resourcePath = '/match/{match_key}/timeseries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($match_key !== null) {
            $resourcePath = str_replace(
                '{' . 'match_key' . '}',
                ObjectSerializer::toPathValue($match_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMatchZebra
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Zebra
     */
    public function getMatchZebra($match_key, $if_modified_since = null)
    {
        list($response) = $this->getMatchZebraWithHttpInfo($match_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getMatchZebraWithHttpInfo
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Zebra, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMatchZebraWithHttpInfo($match_key, $if_modified_since = null)
    {
        $request = $this->getMatchZebraRequest($match_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Zebra' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Zebra', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Zebra';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Zebra',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMatchZebraAsync
     *
     * 
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchZebraAsync($match_key, $if_modified_since = null)
    {
        return $this->getMatchZebraAsyncWithHttpInfo($match_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMatchZebraAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMatchZebraAsyncWithHttpInfo($match_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Zebra';
        $request = $this->getMatchZebraRequest($match_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMatchZebra'
     *
     * @param  string $match_key TBA Match Key, eg &#x60;2016nytr_qm1&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMatchZebraRequest($match_key, $if_modified_since = null)
    {
        // verify the required parameter 'match_key' is set
        if ($match_key === null || (is_array($match_key) && count($match_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $match_key when calling getMatchZebra'
            );
        }

        $resourcePath = '/match/{match_key}/zebra_motionworks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($match_key !== null) {
            $resourcePath = str_replace(
                '{' . 'match_key' . '}',
                ObjectSerializer::toPathValue($match_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventMatches
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Match[]
     */
    public function getTeamEventMatches($team_key, $event_key, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventMatchesWithHttpInfo($team_key, $event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventMatchesWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Match[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventMatchesWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $request = $this->getTeamEventMatchesRequest($team_key, $event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Match[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventMatchesAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventMatchesAsync($team_key, $event_key, $if_modified_since = null)
    {
        return $this->getTeamEventMatchesAsyncWithHttpInfo($team_key, $event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventMatchesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventMatchesAsyncWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
        $request = $this->getTeamEventMatchesRequest($team_key, $event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventMatches'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventMatchesRequest($team_key, $event_key, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventMatches'
            );
        }
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getTeamEventMatches'
            );
        }

        $resourcePath = '/team/{team_key}/event/{event_key}/matches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventMatchesKeys
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getTeamEventMatchesKeys($team_key, $event_key, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventMatchesKeysWithHttpInfo($team_key, $event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventMatchesKeysWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventMatchesKeysWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $request = $this->getTeamEventMatchesKeysRequest($team_key, $event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventMatchesKeysAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventMatchesKeysAsync($team_key, $event_key, $if_modified_since = null)
    {
        return $this->getTeamEventMatchesKeysAsyncWithHttpInfo($team_key, $event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventMatchesKeysAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventMatchesKeysAsyncWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $returnType = 'string[]';
        $request = $this->getTeamEventMatchesKeysRequest($team_key, $event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventMatchesKeys'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventMatchesKeysRequest($team_key, $event_key, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventMatchesKeys'
            );
        }
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getTeamEventMatchesKeys'
            );
        }

        $resourcePath = '/team/{team_key}/event/{event_key}/matches/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamEventMatchesSimple
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Match[]
     */
    public function getTeamEventMatchesSimple($team_key, $event_key, $if_modified_since = null)
    {
        list($response) = $this->getTeamEventMatchesSimpleWithHttpInfo($team_key, $event_key, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamEventMatchesSimpleWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Match[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamEventMatchesSimpleWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $request = $this->getTeamEventMatchesSimpleRequest($team_key, $event_key, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Match[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamEventMatchesSimpleAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventMatchesSimpleAsync($team_key, $event_key, $if_modified_since = null)
    {
        return $this->getTeamEventMatchesSimpleAsyncWithHttpInfo($team_key, $event_key, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamEventMatchesSimpleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamEventMatchesSimpleAsyncWithHttpInfo($team_key, $event_key, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
        $request = $this->getTeamEventMatchesSimpleRequest($team_key, $event_key, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamEventMatchesSimple'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  string $event_key TBA Event Key, eg &#x60;2016nytr&#x60; (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamEventMatchesSimpleRequest($team_key, $event_key, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamEventMatchesSimple'
            );
        }
        // verify the required parameter 'event_key' is set
        if ($event_key === null || (is_array($event_key) && count($event_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event_key when calling getTeamEventMatchesSimple'
            );
        }

        $resourcePath = '/team/{team_key}/event/{event_key}/matches/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($event_key !== null) {
            $resourcePath = str_replace(
                '{' . 'event_key' . '}',
                ObjectSerializer::toPathValue($event_key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamMatchesByYear
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\Match[]
     */
    public function getTeamMatchesByYear($team_key, $year, $if_modified_since = null)
    {
        list($response) = $this->getTeamMatchesByYearWithHttpInfo($team_key, $year, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamMatchesByYearWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\Match[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamMatchesByYearWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $request = $this->getTeamMatchesByYearRequest($team_key, $year, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\Match[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamMatchesByYearAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamMatchesByYearAsync($team_key, $year, $if_modified_since = null)
    {
        return $this->getTeamMatchesByYearAsyncWithHttpInfo($team_key, $year, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamMatchesByYearAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamMatchesByYearAsyncWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\Match[]';
        $request = $this->getTeamMatchesByYearRequest($team_key, $year, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamMatchesByYear'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamMatchesByYearRequest($team_key, $year, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamMatchesByYear'
            );
        }
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling getTeamMatchesByYear'
            );
        }

        $resourcePath = '/team/{team_key}/matches/{year}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamMatchesByYearKeys
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getTeamMatchesByYearKeys($team_key, $year, $if_modified_since = null)
    {
        list($response) = $this->getTeamMatchesByYearKeysWithHttpInfo($team_key, $year, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamMatchesByYearKeysWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamMatchesByYearKeysWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $request = $this->getTeamMatchesByYearKeysRequest($team_key, $year, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamMatchesByYearKeysAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamMatchesByYearKeysAsync($team_key, $year, $if_modified_since = null)
    {
        return $this->getTeamMatchesByYearKeysAsyncWithHttpInfo($team_key, $year, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamMatchesByYearKeysAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamMatchesByYearKeysAsyncWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $returnType = 'string[]';
        $request = $this->getTeamMatchesByYearKeysRequest($team_key, $year, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamMatchesByYearKeys'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamMatchesByYearKeysRequest($team_key, $year, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamMatchesByYearKeys'
            );
        }
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling getTeamMatchesByYearKeys'
            );
        }

        $resourcePath = '/team/{team_key}/matches/{year}/keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTeamMatchesByYearSimple
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]
     */
    public function getTeamMatchesByYearSimple($team_key, $year, $if_modified_since = null)
    {
        list($response) = $this->getTeamMatchesByYearSimpleWithHttpInfo($team_key, $year, $if_modified_since);
        return $response;
    }

    /**
     * Operation getTeamMatchesByYearSimpleWithHttpInfo
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \TBAAPI\v3client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTeamMatchesByYearSimpleWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $request = $this->getTeamMatchesByYearSimpleRequest($team_key, $year, $if_modified_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTeamMatchesByYearSimpleAsync
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamMatchesByYearSimpleAsync($team_key, $year, $if_modified_since = null)
    {
        return $this->getTeamMatchesByYearSimpleAsyncWithHttpInfo($team_key, $year, $if_modified_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTeamMatchesByYearSimpleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTeamMatchesByYearSimpleAsyncWithHttpInfo($team_key, $year, $if_modified_since = null)
    {
        $returnType = '\TBAAPI\v3client\TBAAPI\v3client\model\MatchSimple[]';
        $request = $this->getTeamMatchesByYearSimpleRequest($team_key, $year, $if_modified_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTeamMatchesByYearSimple'
     *
     * @param  string $team_key TBA Team Key, eg &#x60;frc254&#x60; (required)
     * @param  int $year Competition Year (or Season). Must be 4 digits. (required)
     * @param  string $if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTeamMatchesByYearSimpleRequest($team_key, $year, $if_modified_since = null)
    {
        // verify the required parameter 'team_key' is set
        if ($team_key === null || (is_array($team_key) && count($team_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_key when calling getTeamMatchesByYearSimple'
            );
        }
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling getTeamMatchesByYearSimple'
            );
        }

        $resourcePath = '/team/{team_key}/matches/{year}/simple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = ObjectSerializer::toHeaderValue($if_modified_since);
        }

        // path params
        if ($team_key !== null) {
            $resourcePath = str_replace(
                '{' . 'team_key' . '}',
                ObjectSerializer::toPathValue($team_key),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-TBA-Auth-Key');
        if ($apiKey !== null) {
            $headers['X-TBA-Auth-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
